{"remainingRequest":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\babel-loader\\lib\\index.js!E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\iview\\src\\components\\table\\table.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\iview\\src\\components\\table\\table.vue","mtime":1561122214853},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552301733393},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\babel-loader\\lib\\index.js","mtime":1561126025822},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552301733393},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\vue-loader\\lib\\index.js","mtime":1552301761574}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"E:\\\\TRADE\\\\ThinkPHP\\\\pingzi\\\\Application\\\\Admin\\\\View\\\\TGorder\\\\generalize\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport tableHead from \"./table-head.vue\";\nimport tableBody from \"./table-body.vue\";\nimport Spin from \"../spin/spin.vue\";\nimport { oneOf, getStyle, deepCopy, getScrollBarSize } from \"../../utils/assist\";\nimport { on, off } from \"../../utils/dom\";\nimport Csv from \"../../utils/csv\";\nimport ExportCsv from \"./export-csv\";\nimport Locale from \"../../mixins/locale\";\nimport elementResizeDetectorMaker from 'element-resize-detector';\nimport { getAllColumns, convertToRows, convertColumnOrder, getRandomStr } from \"./util\";\nvar prefixCls = 'ivu-table';\nvar rowKey = 1;\nvar columnKey = 1;\nexport default {\n  name: 'Table',\n  mixins: [Locale],\n  components: {\n    tableHead: tableHead,\n    tableBody: tableBody,\n    Spin: Spin\n  },\n  provide: function provide() {\n    return {\n      tableRoot: this\n    };\n  },\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    columns: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    size: {\n      validator: function validator(value) {\n        return oneOf(value, ['small', 'large', 'default']);\n      },\n      default: function _default() {\n        return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n      }\n    },\n    width: {\n      type: [Number, String]\n    },\n    height: {\n      type: [Number, String]\n    },\n    // 3.4.0\n    maxHeight: {\n      type: [Number, String]\n    },\n    stripe: {\n      type: Boolean,\n      default: false\n    },\n    border: {\n      type: Boolean,\n      default: false\n    },\n    showHeader: {\n      type: Boolean,\n      default: true\n    },\n    highlightRow: {\n      type: Boolean,\n      default: false\n    },\n    rowClassName: {\n      type: Function,\n      default: function _default() {\n        return '';\n      }\n    },\n    context: {\n      type: Object\n    },\n    noDataText: {\n      type: String\n    },\n    noFilteredDataText: {\n      type: String\n    },\n    disabledHover: {\n      type: Boolean\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    tooltipTheme: {\n      validator: function validator(value) {\n        return oneOf(value, ['dark', 'light']);\n      },\n      default: 'dark'\n    },\n    // #5380 开启后，:key 强制更新，否则使用 index\n    rowKey: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    var colsWithId = this.makeColumnsId(this.columns);\n    return {\n      ready: false,\n      tableWidth: 0,\n      columnsWidth: {},\n      prefixCls: prefixCls,\n      compiledUids: [],\n      objData: this.makeObjData(),\n      // checkbox or highlight-row\n      rebuildData: [],\n      // for sort or filter\n      cloneColumns: this.makeColumns(colsWithId),\n      columnRows: this.makeColumnRows(false, colsWithId),\n      leftFixedColumnRows: this.makeColumnRows('left', colsWithId),\n      rightFixedColumnRows: this.makeColumnRows('right', colsWithId),\n      allColumns: getAllColumns(colsWithId),\n      // for multiple table-head, get columns that have no children\n      showSlotHeader: true,\n      showSlotFooter: true,\n      bodyHeight: 0,\n      scrollBarWidth: getScrollBarSize(),\n      currentContext: this.context,\n      cloneData: deepCopy(this.data),\n      // when Cell has a button to delete row data, clickCurrentRow will throw an error, so clone a data\n      showVerticalScrollBar: false,\n      showHorizontalScrollBar: false,\n      headerWidth: 0,\n      headerHeight: 0\n    };\n  },\n  computed: {\n    localeNoDataText: function localeNoDataText() {\n      if (this.noDataText === undefined) {\n        return this.t('i.table.noDataText');\n      } else {\n        return this.noDataText;\n      }\n    },\n    localeNoFilteredDataText: function localeNoFilteredDataText() {\n      if (this.noFilteredDataText === undefined) {\n        return this.t('i.table.noFilteredDataText');\n      } else {\n        return this.noFilteredDataText;\n      }\n    },\n    wrapClasses: function wrapClasses() {\n      var _ref;\n\n      return [\"\".concat(prefixCls, \"-wrapper\"), (_ref = {}, _defineProperty(_ref, \"\".concat(prefixCls, \"-hide\"), !this.ready), _defineProperty(_ref, \"\".concat(prefixCls, \"-with-header\"), this.showSlotHeader), _defineProperty(_ref, \"\".concat(prefixCls, \"-with-footer\"), this.showSlotFooter), _ref)];\n    },\n    classes: function classes() {\n      var _ref2;\n\n      return [\"\".concat(prefixCls), (_ref2 = {}, _defineProperty(_ref2, \"\".concat(prefixCls, \"-\").concat(this.size), !!this.size), _defineProperty(_ref2, \"\".concat(prefixCls, \"-border\"), this.border), _defineProperty(_ref2, \"\".concat(prefixCls, \"-stripe\"), this.stripe), _defineProperty(_ref2, \"\".concat(prefixCls, \"-with-fixed-top\"), !!this.height), _ref2)];\n    },\n    fixedHeaderClasses: function fixedHeaderClasses() {\n      return [\"\".concat(prefixCls, \"-fixed-header\"), _defineProperty({}, \"\".concat(prefixCls, \"-fixed-header-with-empty\"), !this.rebuildData.length)];\n    },\n    styles: function styles() {\n      var style = {};\n\n      if (this.height) {\n        var height = parseInt(this.height);\n        style.height = \"\".concat(height, \"px\");\n      }\n\n      if (this.maxHeight) {\n        var maxHeight = parseInt(this.maxHeight);\n        style.maxHeight = \"\".concat(maxHeight, \"px\");\n      }\n\n      if (this.width) style.width = \"\".concat(this.width, \"px\");\n      return style;\n    },\n    tableStyle: function tableStyle() {\n      var style = {};\n\n      if (this.tableWidth !== 0) {\n        var width = '';\n\n        if (this.bodyHeight === 0) {\n          width = this.tableWidth;\n        } else {\n          width = this.tableWidth - (this.showVerticalScrollBar ? this.scrollBarWidth : 0);\n        } //                    const width = this.bodyHeight === 0 ? this.tableWidth : this.tableWidth - this.scrollBarWidth;\n\n\n        style.width = \"\".concat(width, \"px\");\n      }\n\n      return style;\n    },\n    tableHeaderStyle: function tableHeaderStyle() {\n      var style = {};\n\n      if (this.tableWidth !== 0) {\n        var width = '';\n        width = this.tableWidth;\n        style.width = \"\".concat(width, \"px\");\n      }\n\n      return style;\n    },\n    fixedTableStyle: function fixedTableStyle() {\n      var style = {};\n      var width = 0;\n      this.leftFixedColumns.forEach(function (col) {\n        if (col.fixed && col.fixed === 'left') width += col._width;\n      });\n      style.width = \"\".concat(width, \"px\");\n      return style;\n    },\n    fixedRightTableStyle: function fixedRightTableStyle() {\n      var style = {};\n      var width = 0;\n      this.rightFixedColumns.forEach(function (col) {\n        if (col.fixed && col.fixed === 'right') width += col._width;\n      }); //width += this.scrollBarWidth;\n\n      style.width = \"\".concat(width, \"px\");\n      style.right = \"\".concat(this.showVerticalScrollBar ? this.scrollBarWidth : 0, \"px\");\n      return style;\n    },\n    fixedRightHeaderStyle: function fixedRightHeaderStyle() {\n      var style = {};\n      var width = 0;\n      var height = this.headerHeight + 1;\n\n      if (this.showVerticalScrollBar) {\n        width = this.scrollBarWidth;\n      }\n\n      style.width = \"\".concat(width, \"px\");\n      style.height = \"\".concat(height, \"px\");\n      return style;\n    },\n    bodyStyle: function bodyStyle() {\n      var style = {};\n\n      if (this.bodyHeight !== 0) {\n        var height = this.bodyHeight;\n\n        if (this.height) {\n          style.height = \"\".concat(height, \"px\");\n        } else if (this.maxHeight) {\n          style.maxHeight = \"\".concat(height, \"px\");\n        }\n      }\n\n      return style;\n    },\n    fixedBodyStyle: function fixedBodyStyle() {\n      var style = {};\n\n      if (this.bodyHeight !== 0) {\n        var height = this.bodyHeight - (this.showHorizontalScrollBar ? this.scrollBarWidth : 0);\n        style.height = this.showHorizontalScrollBar ? \"\".concat(height, \"px\") : \"\".concat(height - 1, \"px\");\n      }\n\n      return style;\n    },\n    leftFixedColumns: function leftFixedColumns() {\n      return convertColumnOrder(this.cloneColumns, 'left');\n    },\n    rightFixedColumns: function rightFixedColumns() {\n      return convertColumnOrder(this.cloneColumns, 'right');\n    },\n    isLeftFixed: function isLeftFixed() {\n      return this.columns.some(function (col) {\n        return col.fixed && col.fixed === 'left';\n      });\n    },\n    isRightFixed: function isRightFixed() {\n      return this.columns.some(function (col) {\n        return col.fixed && col.fixed === 'right';\n      });\n    }\n  },\n  methods: {\n    rowClsName: function rowClsName(index) {\n      return this.rowClassName(this.data[index], index);\n    },\n    handleResize: function handleResize() {\n      //let tableWidth = parseInt(getStyle(this.$el, 'width')) - 1;\n      var tableWidth = this.$el.offsetWidth - 1;\n      var columnsWidth = {};\n      var sumMinWidth = 0;\n      var hasWidthColumns = [];\n      var noWidthColumns = [];\n      var maxWidthColumns = [];\n      var noMaxWidthColumns = [];\n      this.cloneColumns.forEach(function (col) {\n        if (col.width) {\n          hasWidthColumns.push(col);\n        } else {\n          noWidthColumns.push(col);\n\n          if (col.minWidth) {\n            sumMinWidth += col.minWidth;\n          }\n\n          if (col.maxWidth) {\n            maxWidthColumns.push(col);\n          } else {\n            noMaxWidthColumns.push(col);\n          }\n        }\n\n        col._width = null;\n      });\n      var unUsableWidth = hasWidthColumns.map(function (cell) {\n        return cell.width;\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n      var usableWidth = tableWidth - unUsableWidth - sumMinWidth - (this.showVerticalScrollBar ? this.scrollBarWidth : 0) - 1;\n      var usableLength = noWidthColumns.length;\n      var columnWidth = 0;\n\n      if (usableWidth > 0 && usableLength > 0) {\n        columnWidth = parseInt(usableWidth / usableLength);\n      }\n\n      for (var i = 0; i < this.cloneColumns.length; i++) {\n        var column = this.cloneColumns[i];\n        var width = columnWidth + (column.minWidth ? column.minWidth : 0);\n\n        if (column.width) {\n          width = column.width;\n        } else {\n          if (column._width) {\n            width = column._width;\n          } else {\n            if (column.minWidth > width) {\n              width = column.minWidth;\n            } else if (column.maxWidth < width) {\n              width = column.maxWidth;\n            }\n\n            if (usableWidth > 0) {\n              usableWidth -= width - (column.minWidth ? column.minWidth : 0);\n              usableLength--;\n\n              if (usableLength > 0) {\n                columnWidth = parseInt(usableWidth / usableLength);\n              } else {\n                columnWidth = 0;\n              }\n            } else {\n              columnWidth = 0;\n            }\n          }\n        }\n\n        column._width = width;\n        columnsWidth[column._index] = {\n          width: width\n        };\n      }\n\n      if (usableWidth > 0) {\n        usableLength = noMaxWidthColumns.length;\n        columnWidth = parseInt(usableWidth / usableLength);\n\n        for (var _i = 0; _i < noMaxWidthColumns.length; _i++) {\n          var _column = noMaxWidthColumns[_i];\n\n          var _width = _column._width + columnWidth;\n\n          if (usableLength > 1) {\n            usableLength--;\n            usableWidth -= columnWidth;\n            columnWidth = parseInt(usableWidth / usableLength);\n          } else {\n            columnWidth = 0;\n          }\n\n          _column._width = _width;\n          columnsWidth[_column._index] = {\n            width: _width\n          };\n        }\n      }\n\n      this.tableWidth = this.cloneColumns.map(function (cell) {\n        return cell._width;\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0) + (this.showVerticalScrollBar ? this.scrollBarWidth : 0) + 1;\n      this.columnsWidth = columnsWidth;\n      this.fixedHeader();\n    },\n    handleMouseIn: function handleMouseIn(_index) {\n      if (this.disabledHover) return;\n      if (this.objData[_index]._isHover) return;\n      this.objData[_index]._isHover = true;\n    },\n    handleMouseOut: function handleMouseOut(_index) {\n      if (this.disabledHover) return;\n      this.objData[_index]._isHover = false;\n    },\n    // 通用处理 highlightCurrentRow 和 clearCurrentRow\n    handleCurrentRow: function handleCurrentRow(type, _index) {\n      var oldIndex = -1;\n\n      for (var i in this.objData) {\n        if (this.objData[i]._isHighlight) {\n          oldIndex = parseInt(i);\n          this.objData[i]._isHighlight = false;\n        }\n      }\n\n      if (type === 'highlight') this.objData[_index]._isHighlight = true;\n      var oldData = oldIndex < 0 ? null : JSON.parse(JSON.stringify(this.cloneData[oldIndex]));\n      var newData = type === 'highlight' ? JSON.parse(JSON.stringify(this.cloneData[_index])) : null;\n      this.$emit('on-current-change', newData, oldData);\n    },\n    highlightCurrentRow: function highlightCurrentRow(_index) {\n      if (!this.highlightRow || this.objData[_index]._isHighlight) return;\n      this.handleCurrentRow('highlight', _index);\n    },\n    clearCurrentRow: function clearCurrentRow() {\n      if (!this.highlightRow) return;\n      this.handleCurrentRow('clear');\n    },\n    clickCurrentRow: function clickCurrentRow(_index) {\n      this.highlightCurrentRow(_index);\n      this.$emit('on-row-click', JSON.parse(JSON.stringify(this.cloneData[_index])), _index);\n    },\n    dblclickCurrentRow: function dblclickCurrentRow(_index) {\n      this.highlightCurrentRow(_index);\n      this.$emit('on-row-dblclick', JSON.parse(JSON.stringify(this.cloneData[_index])), _index);\n    },\n    getSelection: function getSelection() {\n      var selectionIndexes = [];\n\n      for (var i in this.objData) {\n        if (this.objData[i]._isChecked) selectionIndexes.push(parseInt(i));\n      }\n\n      return JSON.parse(JSON.stringify(this.data.filter(function (data, index) {\n        return selectionIndexes.indexOf(index) > -1;\n      })));\n    },\n    toggleSelect: function toggleSelect(_index) {\n      var data = {};\n\n      for (var i in this.objData) {\n        if (parseInt(i) === _index) {\n          data = this.objData[i];\n          break;\n        }\n      }\n\n      var status = !data._isChecked;\n      this.objData[_index]._isChecked = status;\n      var selection = this.getSelection();\n      this.$emit(status ? 'on-select' : 'on-select-cancel', selection, JSON.parse(JSON.stringify(this.data[_index])));\n      this.$emit('on-selection-change', selection);\n    },\n    toggleExpand: function toggleExpand(_index) {\n      var _this = this;\n\n      var data = {};\n\n      for (var i in this.objData) {\n        if (parseInt(i) === _index) {\n          data = this.objData[i];\n          break;\n        }\n      }\n\n      var status = !data._isExpanded;\n      this.objData[_index]._isExpanded = status;\n      this.$emit('on-expand', JSON.parse(JSON.stringify(this.cloneData[_index])), status);\n\n      if (this.height || this.maxHeight) {\n        this.$nextTick(function () {\n          return _this.fixedBody();\n        });\n      }\n    },\n    selectAll: function selectAll(status) {\n      // this.rebuildData.forEach((data) => {\n      //     if(this.objData[data._index]._isDisabled){\n      //         this.objData[data._index]._isChecked = false;\n      //     }else{\n      //         this.objData[data._index]._isChecked = status;\n      //     }\n      // });\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.rebuildData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var data = _step.value;\n\n          if (this.objData[data._index]._isDisabled) {\n            continue;\n          } else {\n            this.objData[data._index]._isChecked = status;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var selection = this.getSelection();\n\n      if (status) {\n        this.$emit('on-select-all', selection);\n      } else {\n        this.$emit('on-select-all-cancel', selection);\n      }\n\n      this.$emit('on-selection-change', selection);\n    },\n    fixedHeader: function fixedHeader() {\n      var _this2 = this;\n\n      if (this.height || this.maxHeight) {\n        this.$nextTick(function () {\n          var titleHeight = parseInt(getStyle(_this2.$refs.title, 'height')) || 0;\n          var headerHeight = parseInt(getStyle(_this2.$refs.header, 'height')) || 0;\n          var footerHeight = parseInt(getStyle(_this2.$refs.footer, 'height')) || 0;\n\n          if (_this2.height) {\n            _this2.bodyHeight = _this2.height - titleHeight - headerHeight - footerHeight;\n          } else if (_this2.maxHeight) {\n            _this2.bodyHeight = _this2.maxHeight - titleHeight - headerHeight - footerHeight;\n          }\n\n          _this2.$nextTick(function () {\n            return _this2.fixedBody();\n          });\n        });\n      } else {\n        this.bodyHeight = 0;\n        this.$nextTick(function () {\n          return _this2.fixedBody();\n        });\n      }\n    },\n    fixedBody: function fixedBody() {\n      if (this.$refs.header) {\n        this.headerWidth = this.$refs.header.children[0].offsetWidth;\n        this.headerHeight = this.$refs.header.children[0].offsetHeight; //this.showHorizontalScrollBar = this.headerWidth>this.$refs.header.offsetWidth;\n      }\n\n      if (!this.$refs.tbody || !this.data || this.data.length === 0) {\n        this.showVerticalScrollBar = false;\n      } else {\n        var bodyContentEl = this.$refs.tbody.$el;\n        var bodyEl = bodyContentEl.parentElement;\n        var bodyContentHeight = bodyContentEl.offsetHeight;\n        var bodyHeight = bodyEl.offsetHeight;\n        this.showHorizontalScrollBar = bodyEl.offsetWidth < bodyContentEl.offsetWidth + (this.showVerticalScrollBar ? this.scrollBarWidth : 0);\n        this.showVerticalScrollBar = this.bodyHeight ? bodyHeight - (this.showHorizontalScrollBar ? this.scrollBarWidth : 0) < bodyContentHeight : false;\n\n        if (this.showVerticalScrollBar) {\n          bodyEl.classList.add(this.prefixCls + '-overflowY');\n        } else {\n          bodyEl.classList.remove(this.prefixCls + '-overflowY');\n        }\n\n        if (this.showHorizontalScrollBar) {\n          bodyEl.classList.add(this.prefixCls + '-overflowX');\n        } else {\n          bodyEl.classList.remove(this.prefixCls + '-overflowX');\n        }\n      }\n    },\n    hideColumnFilter: function hideColumnFilter() {\n      this.cloneColumns.forEach(function (col) {\n        return col._filterVisible = false;\n      });\n    },\n    handleBodyScroll: function handleBodyScroll(event) {\n      if (this.showHeader) this.$refs.header.scrollLeft = event.target.scrollLeft;\n      if (this.isLeftFixed) this.$refs.fixedBody.scrollTop = event.target.scrollTop;\n      if (this.isRightFixed) this.$refs.fixedRightBody.scrollTop = event.target.scrollTop;\n      this.hideColumnFilter();\n    },\n    handleFixedMousewheel: function handleFixedMousewheel(event) {\n      var deltaY = event.deltaY;\n\n      if (!deltaY && event.detail) {\n        deltaY = event.detail * 40;\n      }\n\n      if (!deltaY && event.wheelDeltaY) {\n        deltaY = -event.wheelDeltaY;\n      }\n\n      if (!deltaY && event.wheelDelta) {\n        deltaY = -event.wheelDelta;\n      }\n\n      if (!deltaY) return;\n      var body = this.$refs.body;\n      var currentScrollTop = body.scrollTop;\n\n      if (deltaY < 0 && currentScrollTop !== 0) {\n        event.preventDefault();\n      }\n\n      if (deltaY > 0 && body.scrollHeight - body.clientHeight > currentScrollTop) {\n        event.preventDefault();\n      } //body.scrollTop += deltaY;\n\n\n      var step = 0;\n      var timeId = setInterval(function () {\n        step += 5;\n\n        if (deltaY > 0) {\n          body.scrollTop += 2;\n        } else {\n          body.scrollTop -= 2;\n        }\n\n        if (step >= Math.abs(deltaY)) {\n          clearInterval(timeId);\n        }\n      }, 5);\n    },\n    handleMouseWheel: function handleMouseWheel(event) {\n      var deltaX = event.deltaX;\n      var $body = this.$refs.body;\n\n      if (deltaX > 0) {\n        $body.scrollLeft = $body.scrollLeft + 10;\n      } else {\n        $body.scrollLeft = $body.scrollLeft - 10;\n      }\n    },\n    sortData: function sortData(data, type, index) {\n      var _this3 = this;\n\n      var key = this.cloneColumns[index].key;\n      data.sort(function (a, b) {\n        if (_this3.cloneColumns[index].sortMethod) {\n          return _this3.cloneColumns[index].sortMethod(a[key], b[key], type);\n        } else {\n          if (type === 'asc') {\n            return a[key] > b[key] ? 1 : -1;\n          } else if (type === 'desc') {\n            return a[key] < b[key] ? 1 : -1;\n          }\n        }\n      });\n      return data;\n    },\n    handleSort: function handleSort(_index, type) {\n      var index = this.GetOriginalIndex(_index);\n      this.cloneColumns.forEach(function (col) {\n        return col._sortType = 'normal';\n      });\n      var key = this.cloneColumns[index].key;\n\n      if (this.cloneColumns[index].sortable !== 'custom') {\n        // custom is for remote sort\n        if (type === 'normal') {\n          this.rebuildData = this.makeDataWithFilter();\n        } else {\n          this.rebuildData = this.sortData(this.rebuildData, type, index);\n        }\n      }\n\n      this.cloneColumns[index]._sortType = type;\n      this.$emit('on-sort-change', {\n        column: JSON.parse(JSON.stringify(this.allColumns[this.cloneColumns[index]._index])),\n        key: key,\n        order: type\n      });\n    },\n    handleFilterHide: function handleFilterHide(index) {\n      // clear checked that not filter now\n      if (!this.cloneColumns[index]._isFiltered) this.cloneColumns[index]._filterChecked = [];\n    },\n    filterData: function filterData(data, column) {\n      return data.filter(function (row) {\n        //如果定义了远程过滤方法则忽略此方法\n        if (typeof column.filterRemote === 'function') return true;\n        var status = !column._filterChecked.length;\n\n        for (var i = 0; i < column._filterChecked.length; i++) {\n          status = column.filterMethod(column._filterChecked[i], row);\n          if (status) break;\n        }\n\n        return status;\n      });\n    },\n    filterOtherData: function filterOtherData(data, index) {\n      var _this4 = this;\n\n      var column = this.cloneColumns[index];\n\n      if (typeof column.filterRemote === 'function') {\n        column.filterRemote.call(this.$parent, column._filterChecked, column.key, column);\n      }\n\n      this.cloneColumns.forEach(function (col, colIndex) {\n        if (colIndex !== index) {\n          data = _this4.filterData(data, col);\n        }\n      });\n      return data;\n    },\n    handleFilter: function handleFilter(index) {\n      var column = this.cloneColumns[index];\n      var filterData = this.makeDataWithSort(); // filter others first, after filter this column\n\n      filterData = this.filterOtherData(filterData, index);\n      this.rebuildData = this.filterData(filterData, column);\n      this.cloneColumns[index]._isFiltered = true;\n      this.cloneColumns[index]._filterVisible = false;\n      this.$emit('on-filter-change', column);\n    },\n\n    /**\n     * #2832\n     * 应该区分当前表头的 column 是左固定还是右固定\n     * 否则执行到 $parent 时，方法的 index 与 cloneColumns 的 index 是不对应的\n     * 左固定和右固定，要区分对待\n     * 所以，此方法用来获取正确的 index\n     * */\n    GetOriginalIndex: function GetOriginalIndex(_index) {\n      return this.cloneColumns.findIndex(function (item) {\n        return item._index === _index;\n      });\n    },\n    handleFilterSelect: function handleFilterSelect(_index, value) {\n      var index = this.GetOriginalIndex(_index);\n      this.cloneColumns[index]._filterChecked = [value];\n      this.handleFilter(index);\n    },\n    handleFilterReset: function handleFilterReset(_index) {\n      var index = this.GetOriginalIndex(_index);\n      this.cloneColumns[index]._isFiltered = false;\n      this.cloneColumns[index]._filterVisible = false;\n      this.cloneColumns[index]._filterChecked = [];\n      var filterData = this.makeDataWithSort();\n      filterData = this.filterOtherData(filterData, index);\n      this.rebuildData = filterData;\n      this.$emit('on-filter-change', this.cloneColumns[index]);\n    },\n    makeData: function makeData() {\n      var data = deepCopy(this.data);\n      data.forEach(function (row, index) {\n        row._index = index;\n        row._rowKey = rowKey++;\n      });\n      return data;\n    },\n    makeDataWithSort: function makeDataWithSort() {\n      var data = this.makeData();\n      var sortType = 'normal';\n      var sortIndex = -1;\n      var isCustom = false;\n\n      for (var i = 0; i < this.cloneColumns.length; i++) {\n        if (this.cloneColumns[i]._sortType !== 'normal') {\n          sortType = this.cloneColumns[i]._sortType;\n          sortIndex = i;\n          isCustom = this.cloneColumns[i].sortable === 'custom';\n          break;\n        }\n      }\n\n      if (sortType !== 'normal' && !isCustom) data = this.sortData(data, sortType, sortIndex);\n      return data;\n    },\n    makeDataWithFilter: function makeDataWithFilter() {\n      var _this5 = this;\n\n      var data = this.makeData();\n      this.cloneColumns.forEach(function (col) {\n        return data = _this5.filterData(data, col);\n      });\n      return data;\n    },\n    makeDataWithSortAndFilter: function makeDataWithSortAndFilter() {\n      var _this6 = this;\n\n      var data = this.makeDataWithSort();\n      this.cloneColumns.forEach(function (col) {\n        return data = _this6.filterData(data, col);\n      });\n      return data;\n    },\n    makeObjData: function makeObjData() {\n      var data = {};\n      this.data.forEach(function (row, index) {\n        var newRow = deepCopy(row); // todo 直接替换\n\n        newRow._isHover = false;\n\n        if (newRow._disabled) {\n          newRow._isDisabled = newRow._disabled;\n        } else {\n          newRow._isDisabled = false;\n        }\n\n        if (newRow._checked) {\n          newRow._isChecked = newRow._checked;\n        } else {\n          newRow._isChecked = false;\n        }\n\n        if (newRow._expanded) {\n          newRow._isExpanded = newRow._expanded;\n        } else {\n          newRow._isExpanded = false;\n        }\n\n        if (newRow._highlight) {\n          newRow._isHighlight = newRow._highlight;\n        } else {\n          newRow._isHighlight = false;\n        }\n\n        data[index] = newRow;\n      });\n      return data;\n    },\n    // 修改列，设置一个隐藏的 id，便于后面的多级表头寻找对应的列，否则找不到\n    makeColumnsId: function makeColumnsId(columns) {\n      var _this7 = this;\n\n      return columns.map(function (item) {\n        if ('children' in item) _this7.makeColumnsId(item.children);\n        item.__id = getRandomStr(6);\n        return item;\n      });\n    },\n    makeColumns: function makeColumns(cols) {\n      // 在 data 时，this.allColumns 暂时为 undefined\n      var columns = deepCopy(getAllColumns(cols));\n      var left = [];\n      var right = [];\n      var center = [];\n      columns.forEach(function (column, index) {\n        column._index = index;\n        column._columnKey = columnKey++;\n        column.width = parseInt(column.width);\n        column._width = column.width ? column.width : ''; // update in handleResize()\n\n        column._sortType = 'normal';\n        column._filterVisible = false;\n        column._isFiltered = false;\n        column._filterChecked = [];\n\n        if ('filterMultiple' in column) {\n          column._filterMultiple = column.filterMultiple;\n        } else {\n          column._filterMultiple = true;\n        }\n\n        if ('filteredValue' in column) {\n          column._filterChecked = column.filteredValue;\n          column._isFiltered = true;\n        }\n\n        if ('sortType' in column) {\n          column._sortType = column.sortType;\n        }\n\n        if (column.fixed && column.fixed === 'left') {\n          left.push(column);\n        } else if (column.fixed && column.fixed === 'right') {\n          right.push(column);\n        } else {\n          center.push(column);\n        }\n      });\n      return left.concat(center).concat(right);\n    },\n    // create a multiple table-head\n    makeColumnRows: function makeColumnRows(fixedType, cols) {\n      return convertToRows(cols, fixedType);\n    },\n    exportCsv: function exportCsv(params) {\n      if (params.filename) {\n        if (params.filename.indexOf('.csv') === -1) {\n          params.filename += '.csv';\n        }\n      } else {\n        params.filename = 'table.csv';\n      }\n\n      var columns = [];\n      var datas = [];\n\n      if (params.columns && params.data) {\n        columns = params.columns;\n        datas = params.data;\n      } else {\n        columns = this.allColumns;\n        if (!('original' in params)) params.original = true;\n        datas = params.original ? this.data : this.rebuildData;\n      }\n\n      var noHeader = false;\n      if ('noHeader' in params) noHeader = params.noHeader;\n      var data = Csv(columns, datas, params, noHeader);\n      if (params.callback) params.callback(data);else ExportCsv.download(params.filename, data);\n    },\n    dragAndDrop: function dragAndDrop(a, b) {\n      this.$emit('on-drag-drop', a, b);\n    }\n  },\n  created: function created() {\n    if (!this.context) this.currentContext = this.$parent;\n    this.showSlotHeader = this.$slots.header !== undefined;\n    this.showSlotFooter = this.$slots.footer !== undefined;\n    this.rebuildData = this.makeDataWithSortAndFilter();\n  },\n  mounted: function mounted() {\n    var _this8 = this;\n\n    this.handleResize();\n    this.$nextTick(function () {\n      return _this8.ready = true;\n    });\n    on(window, 'resize', this.handleResize);\n    this.observer = elementResizeDetectorMaker();\n    this.observer.listenTo(this.$el, this.handleResize);\n    this.$on('on-visible-change', function (val) {\n      if (val) {\n        _this8.handleResize();\n      }\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    off(window, 'resize', this.handleResize);\n    this.observer.removeListener(this.$el, this.handleResize);\n  },\n  watch: {\n    data: {\n      handler: function handler() {\n        var _this9 = this;\n\n        var oldDataLen = this.rebuildData.length;\n        this.objData = this.makeObjData();\n        this.rebuildData = this.makeDataWithSortAndFilter();\n        this.handleResize();\n\n        if (!oldDataLen) {\n          this.fixedHeader();\n        } // here will trigger before clickCurrentRow, so use async\n\n\n        setTimeout(function () {\n          _this9.cloneData = deepCopy(_this9.data);\n        }, 0);\n      },\n      deep: true\n    },\n    columns: {\n      handler: function handler() {\n        // todo 这里有性能问题，可能是左右固定计算属性影响的\n        var colsWithId = this.makeColumnsId(this.columns);\n        this.allColumns = getAllColumns(colsWithId);\n        this.cloneColumns = this.makeColumns(colsWithId);\n        this.columnRows = this.makeColumnRows(false, colsWithId);\n        this.leftFixedColumnRows = this.makeColumnRows('left', colsWithId);\n        this.rightFixedColumnRows = this.makeColumnRows('right', colsWithId);\n        this.rebuildData = this.makeDataWithSortAndFilter();\n        this.handleResize();\n      },\n      deep: true\n    },\n    height: function height() {\n      this.handleResize();\n    },\n    maxHeight: function maxHeight() {\n      this.handleResize();\n    },\n    showHorizontalScrollBar: function showHorizontalScrollBar() {\n      this.handleResize();\n    },\n    showVerticalScrollBar: function showVerticalScrollBar() {\n      this.handleResize();\n    }\n  }\n};",{"version":3,"sources":["table.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div :class=\"wrapClasses\" :style=\"styles\">\n        <div :class=\"classes\">\n            <div :class=\"[prefixCls + '-title']\" v-if=\"showSlotHeader\" ref=\"title\"><slot name=\"header\"></slot></div>\n            <div :class=\"[prefixCls + '-header']\" v-if=\"showHeader\" ref=\"header\" @mousewheel=\"handleMouseWheel\">\n                <table-head\n                    :prefix-cls=\"prefixCls\"\n                    :styleObject=\"tableHeaderStyle\"\n                    :columns=\"cloneColumns\"\n                    :column-rows=\"columnRows\"\n                    :obj-data=\"objData\"\n                    :columns-width=\"columnsWidth\"\n                    :data=\"rebuildData\"></table-head>\n            </div>\n            <div :class=\"[prefixCls + '-body']\" :style=\"bodyStyle\" ref=\"body\" @scroll=\"handleBodyScroll\"\n                v-show=\"!((!!localeNoDataText && (!data || data.length === 0)) || (!!localeNoFilteredDataText && (!rebuildData || rebuildData.length === 0)))\">\n                <table-body\n                    ref=\"tbody\"\n                    :draggable=\"draggable\"\n                    :prefix-cls=\"prefixCls\"\n                    :styleObject=\"tableStyle\"\n                    :columns=\"cloneColumns\"\n                    :data=\"rebuildData\"\n                    :row-key=\"rowKey\"\n                    :columns-width=\"columnsWidth\"\n                    :obj-data=\"objData\"></table-body>\n            </div>\n            <div\n                :class=\"[prefixCls + '-tip']\" :style=\"bodyStyle\" @scroll=\"handleBodyScroll\"\n                v-show=\"((!!localeNoDataText && (!data || data.length === 0)) || (!!localeNoFilteredDataText && (!rebuildData || rebuildData.length === 0)))\">\n                <table cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\n                    <tbody>\n                        <tr>\n                            <td :style=\"{'height':bodyStyle.height,'width':`${this.headerWidth}px`}\">\n                                <span v-html=\"localeNoDataText\" v-if=\"!data || data.length === 0\"></span>\n                                <span v-html=\"localeNoFilteredDataText\" v-else></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div :class=\"[prefixCls + '-fixed']\" :style=\"fixedTableStyle\" v-if=\"isLeftFixed\">\n                <div :class=\"fixedHeaderClasses\" v-if=\"showHeader\">\n                    <table-head\n                        fixed=\"left\"\n                        :prefix-cls=\"prefixCls\"\n                        :styleObject=\"fixedTableStyle\"\n                        :columns=\"leftFixedColumns\"\n                        :column-rows=\"columnRows\"\n                        :fixed-column-rows=\"leftFixedColumnRows\"\n                        :obj-data=\"objData\"\n                        :columns-width=\"columnsWidth\"\n                        :data=\"rebuildData\"></table-head>\n                </div>\n                <div :class=\"[prefixCls + '-fixed-body']\" :style=\"fixedBodyStyle\" ref=\"fixedBody\" @mousewheel=\"handleFixedMousewheel\" @DOMMouseScroll=\"handleFixedMousewheel\">\n                    <table-body\n                        fixed=\"left\"\n                        :draggable=\"draggable\"\n                        :prefix-cls=\"prefixCls\"\n                        :styleObject=\"fixedTableStyle\"\n                        :columns=\"leftFixedColumns\"\n                        :data=\"rebuildData\"\n                        :row-key=\"rowKey\"\n                        :columns-width=\"columnsWidth\"\n                        :obj-data=\"objData\"></table-body>\n                </div>\n            </div>\n            <div :class=\"[prefixCls + '-fixed-right']\" :style=\"fixedRightTableStyle\" v-if=\"isRightFixed\">\n                <div :class=\"fixedHeaderClasses\" v-if=\"showHeader\">\n                    <table-head\n                        fixed=\"right\"\n                        :prefix-cls=\"prefixCls\"\n                        :styleObject=\"fixedRightTableStyle\"\n                        :columns=\"rightFixedColumns\"\n                        :column-rows=\"columnRows\"\n                        :fixed-column-rows=\"rightFixedColumnRows\"\n                        :obj-data=\"objData\"\n                        :columns-width=\"columnsWidth\"\n                        :data=\"rebuildData\"></table-head>\n                </div>\n                <div :class=\"[prefixCls + '-fixed-body']\" :style=\"fixedBodyStyle\" ref=\"fixedRightBody\" @mousewheel=\"handleFixedMousewheel\" @DOMMouseScroll=\"handleFixedMousewheel\">\n                    <table-body\n                        fixed=\"right\"\n                        :draggable=\"draggable\"\n                        :prefix-cls=\"prefixCls\"\n                        :styleObject=\"fixedRightTableStyle\"\n                        :columns=\"rightFixedColumns\"\n                        :data=\"rebuildData\"\n                        :row-key=\"rowKey\"\n                        :columns-width=\"columnsWidth\"\n                        :obj-data=\"objData\"></table-body>\n                </div>\n            </div>\n            <div :class=\"[prefixCls + '-fixed-right-header']\" :style=\"fixedRightHeaderStyle\" v-if=\"isRightFixed\"></div>\n            <div :class=\"[prefixCls + '-footer']\" v-if=\"showSlotFooter\" ref=\"footer\"><slot name=\"footer\"></slot></div>\n        </div>\n        <Spin fix size=\"large\" v-if=\"loading\">\n            <slot name=\"loading\"></slot>\n        </Spin>\n    </div>\n</template>\n<script>\n    import tableHead from './table-head.vue';\n    import tableBody from './table-body.vue';\n    import Spin from '../spin/spin.vue';\n    import { oneOf, getStyle, deepCopy, getScrollBarSize } from '../../utils/assist';\n    import { on, off } from '../../utils/dom';\n    import Csv from '../../utils/csv';\n    import ExportCsv from './export-csv';\n    import Locale from '../../mixins/locale';\n    import elementResizeDetectorMaker from 'element-resize-detector';\n    import { getAllColumns, convertToRows, convertColumnOrder, getRandomStr } from './util';\n\n    const prefixCls = 'ivu-table';\n\n    let rowKey = 1;\n    let columnKey = 1;\n\n    export default {\n        name: 'Table',\n        mixins: [ Locale ],\n        components: { tableHead, tableBody, Spin },\n        provide () {\n            return {\n                tableRoot: this\n            };\n        },\n        props: {\n            data: {\n                type: Array,\n                default () {\n                    return [];\n                }\n            },\n            columns: {\n                type: Array,\n                default () {\n                    return [];\n                }\n            },\n            size: {\n                validator (value) {\n                    return oneOf(value, ['small', 'large', 'default']);\n                },\n                default () {\n                    return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n                }\n            },\n            width: {\n                type: [Number, String]\n            },\n            height: {\n                type: [Number, String]\n            },\n            // 3.4.0\n            maxHeight: {\n                type: [Number, String]\n            },\n            stripe: {\n                type: Boolean,\n                default: false\n            },\n            border: {\n                type: Boolean,\n                default: false\n            },\n            showHeader: {\n                type: Boolean,\n                default: true\n            },\n            highlightRow: {\n                type: Boolean,\n                default: false\n            },\n            rowClassName: {\n                type: Function,\n                default () {\n                    return '';\n                }\n            },\n            context: {\n                type: Object\n            },\n            noDataText: {\n                type: String\n            },\n            noFilteredDataText: {\n                type: String\n            },\n            disabledHover: {\n                type: Boolean\n            },\n            loading: {\n                type: Boolean,\n                default: false\n            },\n            draggable: {\n                type: Boolean,\n                default: false\n            },\n            tooltipTheme: {\n                validator (value) {\n                    return oneOf(value, ['dark', 'light']);\n                },\n                default: 'dark'\n            },\n            // #5380 开启后，:key 强制更新，否则使用 index\n            rowKey: {\n                type: Boolean,\n                default: false\n            }\n        },\n        data () {\n            const colsWithId = this.makeColumnsId(this.columns);\n            return {\n                ready: false,\n                tableWidth: 0,\n                columnsWidth: {},\n                prefixCls: prefixCls,\n                compiledUids: [],\n                objData: this.makeObjData(),     // checkbox or highlight-row\n                rebuildData: [],    // for sort or filter\n                cloneColumns: this.makeColumns(colsWithId),\n                columnRows: this.makeColumnRows(false, colsWithId),\n                leftFixedColumnRows: this.makeColumnRows('left', colsWithId),\n                rightFixedColumnRows: this.makeColumnRows('right', colsWithId),\n                allColumns: getAllColumns(colsWithId),  // for multiple table-head, get columns that have no children\n                showSlotHeader: true,\n                showSlotFooter: true,\n                bodyHeight: 0,\n                scrollBarWidth: getScrollBarSize(),\n                currentContext: this.context,\n                cloneData: deepCopy(this.data),    // when Cell has a button to delete row data, clickCurrentRow will throw an error, so clone a data\n                showVerticalScrollBar:false,\n                showHorizontalScrollBar:false,\n                headerWidth:0,\n                headerHeight:0,\n            };\n        },\n        computed: {\n            localeNoDataText () {\n                if (this.noDataText === undefined) {\n                    return this.t('i.table.noDataText');\n                } else {\n                    return this.noDataText;\n                }\n            },\n            localeNoFilteredDataText () {\n                if (this.noFilteredDataText === undefined) {\n                    return this.t('i.table.noFilteredDataText');\n                } else {\n                    return this.noFilteredDataText;\n                }\n            },\n            wrapClasses () {\n                return [\n                    `${prefixCls}-wrapper`,\n                    {\n                        [`${prefixCls}-hide`]: !this.ready,\n                        [`${prefixCls}-with-header`]: this.showSlotHeader,\n                        [`${prefixCls}-with-footer`]: this.showSlotFooter\n                    }\n                ];\n            },\n            classes () {\n                return [\n                    `${prefixCls}`,\n                    {\n                        [`${prefixCls}-${this.size}`]: !!this.size,\n                        [`${prefixCls}-border`]: this.border,\n                        [`${prefixCls}-stripe`]: this.stripe,\n                        [`${prefixCls}-with-fixed-top`]: !!this.height\n                    }\n                ];\n            },\n            fixedHeaderClasses () {\n                return [\n                    `${prefixCls}-fixed-header`,\n                    {\n                        [`${prefixCls}-fixed-header-with-empty`]: !this.rebuildData.length\n                    }\n                ];\n            },\n            styles () {\n                let style = {};\n                if (this.height) {\n                    const height = parseInt(this.height);\n                    style.height = `${height}px`;\n                }\n                if (this.maxHeight) {\n                    const maxHeight = parseInt(this.maxHeight);\n                    style.maxHeight = `${maxHeight}px`;\n                }\n                if (this.width) style.width = `${this.width}px`;\n                return style;\n            },\n            tableStyle () {\n                let style = {};\n                if (this.tableWidth !== 0) {\n                    let width = '';\n                    if (this.bodyHeight === 0) {\n                        width = this.tableWidth;\n                    } else {\n                        width = this.tableWidth - (this.showVerticalScrollBar?this.scrollBarWidth:0);\n                    }\n//                    const width = this.bodyHeight === 0 ? this.tableWidth : this.tableWidth - this.scrollBarWidth;\n                    style.width = `${width}px`;\n                }\n                return style;\n            },\n            tableHeaderStyle () {\n                let style = {};\n                if (this.tableWidth !== 0) {\n                    let width = '';\n                    width = this.tableWidth;\n                    style.width = `${width}px`;\n                }\n                return style;\n            },\n            fixedTableStyle () {\n                let style = {};\n                let width = 0;\n                this.leftFixedColumns.forEach((col) => {\n                    if (col.fixed && col.fixed === 'left') width += col._width;\n                });\n                style.width = `${width}px`;\n                return style;\n            },\n            fixedRightTableStyle () {\n                let style = {};\n                let width = 0;\n                this.rightFixedColumns.forEach((col) => {\n                    if (col.fixed && col.fixed === 'right') width += col._width;\n                });\n                //width += this.scrollBarWidth;\n                style.width = `${width}px`;\n                style.right = `${this.showVerticalScrollBar?this.scrollBarWidth:0}px`;\n                return style;\n            },\n            fixedRightHeaderStyle () {\n                let style = {};\n                let width = 0;\n                let height = this.headerHeight+1;\n                if(this.showVerticalScrollBar){\n                    width = this.scrollBarWidth;\n                }\n                style.width = `${width}px`;\n                style.height = `${height}px`;\n                return style;\n            },\n            bodyStyle () {\n                let style = {};\n                if (this.bodyHeight !== 0) {\n                    const height = this.bodyHeight;\n                    if (this.height) {\n                        style.height = `${height}px`;\n                    } else if (this.maxHeight) {\n                        style.maxHeight = `${height}px`;\n                    }\n                }\n                return style;\n            },\n            fixedBodyStyle () {\n                let style = {};\n                if (this.bodyHeight !== 0) {\n                    let height = this.bodyHeight - (this.showHorizontalScrollBar?this.scrollBarWidth:0);\n                    style.height = this.showHorizontalScrollBar ? `${height}px` : `${height - 1}px`;\n                }\n                return style;\n            },\n            leftFixedColumns () {\n                return convertColumnOrder(this.cloneColumns, 'left');\n            },\n            rightFixedColumns () {\n                return convertColumnOrder(this.cloneColumns, 'right');\n            },\n            isLeftFixed () {\n                return this.columns.some(col => col.fixed && col.fixed === 'left');\n            },\n            isRightFixed () {\n                return this.columns.some(col => col.fixed && col.fixed === 'right');\n            }\n        },\n        methods: {\n            rowClsName (index) {\n                return this.rowClassName(this.data[index], index);\n            },\n            handleResize () {\n                    //let tableWidth = parseInt(getStyle(this.$el, 'width')) - 1;\n                let tableWidth = this.$el.offsetWidth - 1;\n                let columnsWidth = {};\n                let sumMinWidth = 0;\n                let hasWidthColumns = [];\n                let noWidthColumns = [];\n                let maxWidthColumns = [];\n                let noMaxWidthColumns = [];\n                this.cloneColumns.forEach((col) => {\n                    if (col.width) {\n                        hasWidthColumns.push(col);\n                    }\n                    else{\n                        noWidthColumns.push(col);\n                        if (col.minWidth) {\n                            sumMinWidth += col.minWidth;\n                        }\n                        if (col.maxWidth) {\n                            maxWidthColumns.push(col);\n                        }\n                        else {\n                            noMaxWidthColumns.push(col);\n                        }\n                    }\n                    col._width = null;\n                });\n\n\n                let unUsableWidth = hasWidthColumns.map(cell => cell.width).reduce((a, b) => a + b, 0);\n                let usableWidth = tableWidth - unUsableWidth - sumMinWidth - (this.showVerticalScrollBar?this.scrollBarWidth:0) - 1;\n                let usableLength = noWidthColumns.length;\n                let columnWidth = 0;\n                if(usableWidth > 0 && usableLength > 0){\n                    columnWidth = parseInt(usableWidth / usableLength);\n                }\n\n                    \n                for (let i = 0; i < this.cloneColumns.length; i++) {\n                    const column = this.cloneColumns[i];\n                    let width = columnWidth + (column.minWidth?column.minWidth:0);\n                    if(column.width){\n                        width = column.width;\n                    }\n                    else{\n                        if (column._width) {\n                            width = column._width;\n                        }\n                        else {\n                            if (column.minWidth > width){\n                                width = column.minWidth;\n                            }\n                            else if (column.maxWidth < width){\n                                width = column.maxWidth;\n                            }\n                            \n                            if (usableWidth>0) {\n                                usableWidth -= width - (column.minWidth?column.minWidth:0);\n                                usableLength--;\n                                if (usableLength > 0) {\n                                    columnWidth = parseInt(usableWidth / usableLength);\n                                }\n                                else {\n                                    columnWidth = 0;\n                                }\n                            }\n                            else{\n                                columnWidth = 0;\n                            }\n                        }\n                    }\n\n                    column._width = width;\n\n                    columnsWidth[column._index] = {\n                        width: width\n                    };\n\n                }\n                if(usableWidth>0) {\n                    usableLength = noMaxWidthColumns.length;\n                    columnWidth = parseInt(usableWidth / usableLength);\n                    for (let i = 0; i < noMaxWidthColumns.length; i++) {\n                        const column = noMaxWidthColumns[i];\n                        let width = column._width + columnWidth;\n                        if (usableLength > 1) {\n                            usableLength--;\n                            usableWidth -= columnWidth;\n                            columnWidth = parseInt(usableWidth / usableLength);\n                        }\n                        else {\n                            columnWidth = 0;\n                        }\n\n                        column._width = width;\n\n                        columnsWidth[column._index] = {\n                            width: width\n                        };\n\n                    }\n                }\n                \n                this.tableWidth = this.cloneColumns.map(cell => cell._width).reduce((a, b) => a + b, 0) + (this.showVerticalScrollBar?this.scrollBarWidth:0) + 1;\n                this.columnsWidth = columnsWidth;\n                this.fixedHeader();\n            },\n            handleMouseIn (_index) {\n                if (this.disabledHover) return;\n                if (this.objData[_index]._isHover) return;\n                this.objData[_index]._isHover = true;\n            },\n            handleMouseOut (_index) {\n                if (this.disabledHover) return;\n                this.objData[_index]._isHover = false;\n            },\n            // 通用处理 highlightCurrentRow 和 clearCurrentRow\n            handleCurrentRow (type, _index) {\n                let oldIndex = -1;\n                for (let i in this.objData) {\n                    if (this.objData[i]._isHighlight) {\n                        oldIndex = parseInt(i);\n                        this.objData[i]._isHighlight = false;\n                    }\n                }\n                if (type === 'highlight') this.objData[_index]._isHighlight = true;\n                const oldData = oldIndex < 0 ? null : JSON.parse(JSON.stringify(this.cloneData[oldIndex]));\n                const newData = type === 'highlight' ? JSON.parse(JSON.stringify(this.cloneData[_index])) : null;\n                this.$emit('on-current-change', newData, oldData);\n            },\n            highlightCurrentRow (_index) {\n                if (!this.highlightRow || this.objData[_index]._isHighlight) return;\n                this.handleCurrentRow('highlight', _index);\n            },\n            clearCurrentRow () {\n                if (!this.highlightRow) return;\n                this.handleCurrentRow('clear');\n            },\n            clickCurrentRow (_index) {\n                this.highlightCurrentRow (_index);\n                this.$emit('on-row-click', JSON.parse(JSON.stringify(this.cloneData[_index])), _index);\n            },\n            dblclickCurrentRow (_index) {\n                this.highlightCurrentRow (_index);\n                this.$emit('on-row-dblclick', JSON.parse(JSON.stringify(this.cloneData[_index])), _index);\n            },\n            getSelection () {\n                let selectionIndexes = [];\n                for (let i in this.objData) {\n                    if (this.objData[i]._isChecked) selectionIndexes.push(parseInt(i));\n                }\n                return JSON.parse(JSON.stringify(this.data.filter((data, index) => selectionIndexes.indexOf(index) > -1)));\n            },\n            toggleSelect (_index) {\n                let data = {};\n\n                for (let i in this.objData) {\n                    if (parseInt(i) === _index) {\n                        data = this.objData[i];\n                        break;\n                    }\n                }\n                const status = !data._isChecked;\n\n                this.objData[_index]._isChecked = status;\n\n                const selection = this.getSelection();\n                this.$emit(status ? 'on-select' : 'on-select-cancel', selection, JSON.parse(JSON.stringify(this.data[_index])));\n                this.$emit('on-selection-change', selection);\n            },\n            toggleExpand (_index) {\n                let data = {};\n\n                for (let i in this.objData) {\n                    if (parseInt(i) === _index) {\n                        data = this.objData[i];\n                        break;\n                    }\n                }\n                const status = !data._isExpanded;\n                this.objData[_index]._isExpanded = status;\n                this.$emit('on-expand', JSON.parse(JSON.stringify(this.cloneData[_index])), status);\n                \n                if(this.height || this.maxHeight){\n                    this.$nextTick(()=>this.fixedBody());\n                }\n            },\n            selectAll (status) {\n                // this.rebuildData.forEach((data) => {\n                //     if(this.objData[data._index]._isDisabled){\n                //         this.objData[data._index]._isChecked = false;\n                //     }else{\n                //         this.objData[data._index]._isChecked = status;\n                //     }\n\n                // });\n                for(const data of this.rebuildData){\n                    if(this.objData[data._index]._isDisabled){\n                        continue;\n                    }else{\n                        this.objData[data._index]._isChecked = status;\n                    }\n                }\n                const selection = this.getSelection();\n                if (status) {\n                    this.$emit('on-select-all', selection);\n                } else {\n                    this.$emit('on-select-all-cancel', selection);\n                }\n                this.$emit('on-selection-change', selection);\n            },\n            \n            fixedHeader () {\n                if (this.height || this.maxHeight) {\n                    this.$nextTick(() => {\n                        const titleHeight = parseInt(getStyle(this.$refs.title, 'height')) || 0;\n                        const headerHeight = parseInt(getStyle(this.$refs.header, 'height')) || 0;\n                        const footerHeight = parseInt(getStyle(this.$refs.footer, 'height')) || 0;\n                        if (this.height) {\n                            this.bodyHeight = this.height - titleHeight - headerHeight - footerHeight;\n                        } else if (this.maxHeight) {\n                            this.bodyHeight = this.maxHeight - titleHeight - headerHeight - footerHeight;\n                        }\n                        this.$nextTick(()=>this.fixedBody());\n                    });\n                } else {\n                    this.bodyHeight = 0;\n                    this.$nextTick(()=>this.fixedBody());\n                }\n            },\n            fixedBody (){\n                if (this.$refs.header) {\n                    this.headerWidth = this.$refs.header.children[0].offsetWidth;\n                    this.headerHeight = this.$refs.header.children[0].offsetHeight;\n                    //this.showHorizontalScrollBar = this.headerWidth>this.$refs.header.offsetWidth;\n                }\n\n                if (!this.$refs.tbody || !this.data || this.data.length === 0) {\n                    this.showVerticalScrollBar = false;\n                }\n                else{\n                    let bodyContentEl = this.$refs.tbody.$el;\n                    let bodyEl = bodyContentEl.parentElement;\n                    let bodyContentHeight = bodyContentEl.offsetHeight;\n                    let bodyHeight = bodyEl.offsetHeight;\n\n                    this.showHorizontalScrollBar = bodyEl.offsetWidth < bodyContentEl.offsetWidth + (this.showVerticalScrollBar?this.scrollBarWidth:0);\n                    this.showVerticalScrollBar = this.bodyHeight? bodyHeight - (this.showHorizontalScrollBar?this.scrollBarWidth:0) < bodyContentHeight : false;\n                    \n                    if(this.showVerticalScrollBar){\n                        bodyEl.classList.add(this.prefixCls +'-overflowY');\n                    }else{\n                        bodyEl.classList.remove(this.prefixCls +'-overflowY');\n                    }\n                    if(this.showHorizontalScrollBar){\n                        bodyEl.classList.add(this.prefixCls +'-overflowX');\n                    }else{\n                        bodyEl.classList.remove(this.prefixCls +'-overflowX');\n                    }\n                } \n            },\n\n            hideColumnFilter () {\n                this.cloneColumns.forEach((col) => col._filterVisible = false);\n            },\n            handleBodyScroll (event) {\n                if (this.showHeader) this.$refs.header.scrollLeft = event.target.scrollLeft;\n                if (this.isLeftFixed) this.$refs.fixedBody.scrollTop = event.target.scrollTop;\n                if (this.isRightFixed) this.$refs.fixedRightBody.scrollTop = event.target.scrollTop;\n                this.hideColumnFilter();\n            },\n            handleFixedMousewheel(event) {\n                let deltaY = event.deltaY;\n                if(!deltaY && event.detail){\n                    deltaY = event.detail * 40;\n                }\n                if(!deltaY && event.wheelDeltaY){\n                    deltaY = -event.wheelDeltaY;\n                }\n                if(!deltaY && event.wheelDelta){\n                    deltaY = -event.wheelDelta;\n                }\n                if(!deltaY) return;\n                const body = this.$refs.body;\n                const currentScrollTop = body.scrollTop;\n                if (deltaY < 0 && currentScrollTop !== 0) {\n                    event.preventDefault();\n                }\n                if (deltaY > 0 && body.scrollHeight - body.clientHeight > currentScrollTop) {\n                    event.preventDefault();\n                }\n                //body.scrollTop += deltaY;\n                let step = 0;\n                let timeId = setInterval(()=>{\n                    step += 5;\n                    if(deltaY>0){\n                        body.scrollTop += 2;\n                    }\n                    else{\n                        body.scrollTop -= 2;\n                    }\n                    if(step >= Math.abs(deltaY)){\n                        clearInterval(timeId);\n                    }\n                }, 5);\n            },\n            handleMouseWheel (event) {\n                const deltaX = event.deltaX;\n                const $body = this.$refs.body;\n\n                if (deltaX > 0) {\n                    $body.scrollLeft = $body.scrollLeft + 10;\n                } else {\n                    $body.scrollLeft = $body.scrollLeft - 10;\n                }\n            },\n            sortData (data, type, index) {\n                const key = this.cloneColumns[index].key;\n                data.sort((a, b) => {\n                    if (this.cloneColumns[index].sortMethod) {\n                        return this.cloneColumns[index].sortMethod(a[key], b[key], type);\n                    } else {\n                        if (type === 'asc') {\n                            return a[key] > b[key] ? 1 : -1;\n                        } else if (type === 'desc') {\n                            return a[key] < b[key] ? 1 : -1;\n                        }\n                    }\n                });\n                return data;\n            },\n            handleSort (_index, type) {\n                const index = this.GetOriginalIndex(_index);\n                this.cloneColumns.forEach((col) => col._sortType = 'normal');\n\n                const key = this.cloneColumns[index].key;\n                if (this.cloneColumns[index].sortable !== 'custom') {    // custom is for remote sort\n                    if (type === 'normal') {\n                        this.rebuildData = this.makeDataWithFilter();\n                    } else {\n                        this.rebuildData = this.sortData(this.rebuildData, type, index);\n                    }\n                }\n                this.cloneColumns[index]._sortType = type;\n\n                this.$emit('on-sort-change', {\n                    column: JSON.parse(JSON.stringify(this.allColumns[this.cloneColumns[index]._index])),\n                    key: key,\n                    order: type\n                });\n            },\n            handleFilterHide (index) {    // clear checked that not filter now\n                if (!this.cloneColumns[index]._isFiltered) this.cloneColumns[index]._filterChecked = [];\n            },\n            filterData (data, column) {\n                return data.filter((row) => {\n                    //如果定义了远程过滤方法则忽略此方法\n                    if (typeof column.filterRemote === 'function') return true;\n\n                    let status = !column._filterChecked.length;\n                    for (let i = 0; i < column._filterChecked.length; i++) {\n                        status = column.filterMethod(column._filterChecked[i], row);\n                        if (status) break;\n                    }\n                    return status;\n                });\n            },\n            filterOtherData (data, index) {\n                let column = this.cloneColumns[index];\n                if (typeof column.filterRemote === 'function') {\n                    column.filterRemote.call(this.$parent, column._filterChecked, column.key, column);\n                }\n\n                this.cloneColumns.forEach((col, colIndex) => {\n                    if (colIndex !== index) {\n                        data = this.filterData(data, col);\n                    }\n                });\n                return data;\n            },\n            handleFilter (index) {\n                const column = this.cloneColumns[index];\n                let filterData = this.makeDataWithSort();\n\n                // filter others first, after filter this column\n                filterData = this.filterOtherData(filterData, index);\n                this.rebuildData = this.filterData(filterData, column);\n\n                this.cloneColumns[index]._isFiltered = true;\n                this.cloneColumns[index]._filterVisible = false;\n                this.$emit('on-filter-change', column);\n            },\n            /**\n             * #2832\n             * 应该区分当前表头的 column 是左固定还是右固定\n             * 否则执行到 $parent 时，方法的 index 与 cloneColumns 的 index 是不对应的\n             * 左固定和右固定，要区分对待\n             * 所以，此方法用来获取正确的 index\n             * */\n            GetOriginalIndex (_index) {\n                return this.cloneColumns.findIndex(item => item._index === _index);\n            },\n            handleFilterSelect (_index, value) {\n                const index = this.GetOriginalIndex(_index);\n                this.cloneColumns[index]._filterChecked = [value];\n                this.handleFilter(index);\n            },\n            handleFilterReset (_index) {\n                const index = this.GetOriginalIndex(_index);\n                this.cloneColumns[index]._isFiltered = false;\n                this.cloneColumns[index]._filterVisible = false;\n                this.cloneColumns[index]._filterChecked = [];\n\n                let filterData = this.makeDataWithSort();\n                filterData = this.filterOtherData(filterData, index);\n                this.rebuildData = filterData;\n                this.$emit('on-filter-change', this.cloneColumns[index]);\n            },\n            makeData () {\n                let data = deepCopy(this.data);\n                data.forEach((row, index) => {\n                    row._index = index;\n                    row._rowKey = rowKey++;\n                });\n                return data;\n            },\n            makeDataWithSort () {\n                let data = this.makeData();\n                let sortType = 'normal';\n                let sortIndex = -1;\n                let isCustom = false;\n\n                for (let i = 0; i < this.cloneColumns.length; i++) {\n                    if (this.cloneColumns[i]._sortType !== 'normal') {\n                        sortType = this.cloneColumns[i]._sortType;\n                        sortIndex = i;\n                        isCustom = this.cloneColumns[i].sortable === 'custom';\n                        break;\n                    }\n                }\n                if (sortType !== 'normal' && !isCustom) data =  this.sortData(data, sortType, sortIndex);\n                return data;\n            },\n            makeDataWithFilter () {\n                let data = this.makeData();\n                this.cloneColumns.forEach(col => data = this.filterData(data, col));\n                return data;\n            },\n            makeDataWithSortAndFilter () {\n                let data = this.makeDataWithSort();\n                this.cloneColumns.forEach(col => data = this.filterData(data, col));\n                return data;\n            },\n            makeObjData () {\n                let data = {};\n                this.data.forEach((row, index) => {\n                    const newRow = deepCopy(row);// todo 直接替换\n                    newRow._isHover = false;\n                    if (newRow._disabled) {\n                        newRow._isDisabled = newRow._disabled;\n                    } else {\n                        newRow._isDisabled = false;\n                    }\n                    if (newRow._checked) {\n                        newRow._isChecked = newRow._checked;\n                    } else {\n                        newRow._isChecked = false;\n                    }\n                    if (newRow._expanded) {\n                        newRow._isExpanded = newRow._expanded;\n                    } else {\n                        newRow._isExpanded = false;\n                    }\n                    if (newRow._highlight) {\n                        newRow._isHighlight = newRow._highlight;\n                    } else {\n                        newRow._isHighlight = false;\n                    }\n                    data[index] = newRow;\n                });\n                return data;\n            },\n            // 修改列，设置一个隐藏的 id，便于后面的多级表头寻找对应的列，否则找不到\n            makeColumnsId (columns) {\n                return columns.map(item => {\n                    if ('children' in item) this.makeColumnsId(item.children);\n                    item.__id = getRandomStr(6);\n                    return item;\n                });\n            },\n            makeColumns (cols) {\n                // 在 data 时，this.allColumns 暂时为 undefined\n                let columns = deepCopy(getAllColumns(cols));\n                let left = [];\n                let right = [];\n                let center = [];\n\n                columns.forEach((column, index) => {\n                    column._index = index;\n                    column._columnKey = columnKey++;\n                    column.width = parseInt(column.width);\n                    column._width = column.width ? column.width : '';    // update in handleResize()\n                    column._sortType = 'normal';\n                    column._filterVisible = false;\n                    column._isFiltered = false;\n                    column._filterChecked = [];\n\n                    if ('filterMultiple' in column) {\n                        column._filterMultiple = column.filterMultiple;\n                    } else {\n                        column._filterMultiple = true;\n                    }\n                    if ('filteredValue' in column) {\n                        column._filterChecked = column.filteredValue;\n                        column._isFiltered = true;\n                    }\n\n                    if ('sortType' in column) {\n                        column._sortType = column.sortType;\n                    }\n\n                    if (column.fixed && column.fixed === 'left') {\n                        left.push(column);\n                    } else if (column.fixed && column.fixed === 'right') {\n                        right.push(column);\n                    } else {\n                        center.push(column);\n                    }\n                });\n                return left.concat(center).concat(right);\n            },\n            // create a multiple table-head\n            makeColumnRows (fixedType, cols) {\n                return convertToRows(cols, fixedType);\n            },\n            exportCsv (params) {\n                if (params.filename) {\n                    if (params.filename.indexOf('.csv') === -1) {\n                        params.filename += '.csv';\n                    }\n                } else {\n                    params.filename = 'table.csv';\n                }\n\n                let columns = [];\n                let datas = [];\n                if (params.columns && params.data) {\n                    columns = params.columns;\n                    datas = params.data;\n                } else {\n                    columns = this.allColumns;\n                    if (!('original' in params)) params.original = true;\n                    datas = params.original ? this.data : this.rebuildData;\n                }\n\n                let noHeader = false;\n                if ('noHeader' in params) noHeader = params.noHeader;\n\n                const data = Csv(columns, datas, params, noHeader);\n                if (params.callback) params.callback(data);\n                else ExportCsv.download(params.filename, data);\n            },\n            dragAndDrop(a,b) {\n                this.$emit('on-drag-drop', a,b);\n            }\n        },\n        created () {\n            if (!this.context) this.currentContext = this.$parent;\n            this.showSlotHeader = this.$slots.header !== undefined;\n            this.showSlotFooter = this.$slots.footer !== undefined;\n            this.rebuildData = this.makeDataWithSortAndFilter();\n        },\n        mounted () {\n            this.handleResize();\n            this.$nextTick(() => this.ready = true);\n\n            on(window, 'resize', this.handleResize);\n            this.observer = elementResizeDetectorMaker();\n            this.observer.listenTo(this.$el, this.handleResize);\n\n            this.$on('on-visible-change', (val) => {\n                if (val) {\n                    this.handleResize();\n                }\n            });\n        },\n        beforeDestroy () {\n            off(window, 'resize', this.handleResize);\n            this.observer.removeListener(this.$el, this.handleResize);\n        },\n        watch: {\n            data: {\n                handler () {\n                    const oldDataLen = this.rebuildData.length;\n                    this.objData = this.makeObjData();\n                    this.rebuildData = this.makeDataWithSortAndFilter();\n                    this.handleResize();\n                    if (!oldDataLen) {\n                        this.fixedHeader();\n                    }\n                    // here will trigger before clickCurrentRow, so use async\n                    setTimeout(() => {\n                        this.cloneData = deepCopy(this.data);\n                    }, 0);\n                },\n                deep: true\n            },\n            columns: {\n                handler () {\n                    // todo 这里有性能问题，可能是左右固定计算属性影响的\n                    const colsWithId = this.makeColumnsId(this.columns);\n                    this.allColumns = getAllColumns(colsWithId);\n                    this.cloneColumns = this.makeColumns(colsWithId);\n\n                    this.columnRows = this.makeColumnRows(false, colsWithId);\n                    this.leftFixedColumnRows = this.makeColumnRows('left', colsWithId);\n                    this.rightFixedColumnRows = this.makeColumnRows('right', colsWithId);\n                    this.rebuildData = this.makeDataWithSortAndFilter();\n                    this.handleResize();\n                },\n                deep: true\n            },\n            height () {\n                this.handleResize();\n            },\n            maxHeight () {\n                this.handleResize();\n            },\n            showHorizontalScrollBar () {\n                this.handleResize();\n            },\n            showVerticalScrollBar () {\n                this.handleResize();\n            }\n        }\n    };\n</script>\n"],"sourceRoot":"node_modules/iview/src/components/table"}]}