{"remainingRequest":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\iview\\src\\components\\input\\input.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\iview\\src\\components\\input\\input.vue","mtime":1561122214853},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552301733393},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\babel-loader\\lib\\index.js","mtime":1561126025822},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552301733393},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\vue-loader\\lib\\index.js","mtime":1552301761574}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { oneOf, findComponentUpward } from '../../utils/assist';\nimport calcTextareaHeight from '../../utils/calcTextareaHeight';\nimport Emitter from '../../mixins/emitter';\n\nconst prefixCls = 'ivu-input';\n\nexport default {\n    name: 'Input',\n    mixins: [ Emitter ],\n    props: {\n        type: {\n            validator (value) {\n                return oneOf(value, ['text', 'textarea', 'password', 'url', 'email', 'date', 'number', 'tel']);\n            },\n            default: 'text'\n        },\n        value: {\n            type: [String, Number],\n            default: ''\n        },\n        size: {\n            validator (value) {\n                return oneOf(value, ['small', 'large', 'default']);\n            },\n            default () {\n                return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n            }\n        },\n        placeholder: {\n            type: String,\n            default: ''\n        },\n        maxlength: {\n            type: Number\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        icon: String,\n        autosize: {\n            type: [Boolean, Object],\n            default: false\n        },\n        rows: {\n            type: Number,\n            default: 2\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        name: {\n            type: String\n        },\n        number: {\n            type: Boolean,\n            default: false\n        },\n        autofocus: {\n            type: Boolean,\n            default: false\n        },\n        spellcheck: {\n            type: Boolean,\n            default: false\n        },\n        autocomplete: {\n            type: String,\n            default: 'off'\n        },\n        clearable: {\n            type: Boolean,\n            default: false\n        },\n        elementId: {\n            type: String\n        },\n        wrap: {\n            validator (value) {\n                return oneOf(value, ['hard', 'soft']);\n            },\n            default: 'soft'\n        },\n        prefix: {\n            type: String,\n            default: ''\n        },\n        suffix: {\n            type: String,\n            default: ''\n        },\n        search: {\n            type: Boolean,\n            default: false\n        },\n        enterButton: {\n            type: [Boolean, String],\n            default: false\n        }\n    },\n    data () {\n        return {\n            currentValue: this.value,\n            prefixCls: prefixCls,\n            prepend: true,\n            append: true,\n            slotReady: false,\n            textareaStyles: {},\n            showPrefix: false,\n            showSuffix: false,\n            isOnComposition: false\n        };\n    },\n    computed: {\n        wrapClasses () {\n            return [\n                `${prefixCls}-wrapper`,\n                {\n                    [`${prefixCls}-wrapper-${this.size}`]: !!this.size,\n                    [`${prefixCls}-type`]: this.type,\n                    [`${prefixCls}-group`]: this.prepend || this.append || (this.search && this.enterButton),\n                    [`${prefixCls}-group-${this.size}`]: (this.prepend || this.append || (this.search && this.enterButton)) && !!this.size,\n                    [`${prefixCls}-group-with-prepend`]: this.prepend,\n                    [`${prefixCls}-group-with-append`]: this.append || (this.search && this.enterButton),\n                    [`${prefixCls}-hide-icon`]: this.append,  // #554\n                    [`${prefixCls}-with-search`]: (this.search && this.enterButton)\n                }\n            ];\n        },\n        inputClasses () {\n            return [\n                `${prefixCls}`,\n                {\n                    [`${prefixCls}-${this.size}`]: !!this.size,\n                    [`${prefixCls}-disabled`]: this.disabled,\n                    [`${prefixCls}-with-prefix`]: this.showPrefix,\n                    [`${prefixCls}-with-suffix`]: this.showSuffix || (this.search && this.enterButton === false)\n                }\n            ];\n        },\n        textareaClasses () {\n            return [\n                `${prefixCls}`,\n                {\n                    [`${prefixCls}-disabled`]: this.disabled\n                }\n            ];\n        }\n    },\n    methods: {\n        handleEnter (event) {\n            this.$emit('on-enter', event);\n            if (this.search) this.$emit('on-search', this.currentValue);\n        },\n        handleKeydown (event) {\n            this.$emit('on-keydown', event);\n        },\n        handleKeypress(event) {\n            this.$emit('on-keypress', event);\n        },\n        handleKeyup (event) {\n            this.$emit('on-keyup', event);\n        },\n        handleIconClick (event) {\n            this.$emit('on-click', event);\n        },\n        handleFocus (event) {\n            this.$emit('on-focus', event);\n        },\n        handleBlur (event) {\n            this.$emit('on-blur', event);\n            if (!findComponentUpward(this, ['DatePicker', 'TimePicker', 'Cascader', 'Search'])) {\n                this.dispatch('FormItem', 'on-form-blur', this.currentValue);\n            }\n        },\n        handleComposition(event) {\n            if (event.type === 'compositionstart') {\n                this.isOnComposition = true;\n            }\n            if (event.type === 'compositionend') {\n                this.isOnComposition = false;\n                this.handleInput(event);\n            }\n        },\n        handleInput (event) {\n            if (this.isOnComposition) return;\n\n            let value = event.target.value;\n            if (this.number && value !== '') value = Number.isNaN(Number(value)) ? value : Number(value);\n            this.$emit('input', value);\n            this.setCurrentValue(value);\n            this.$emit('on-change', event);\n        },\n        handleChange (event) {\n            this.$emit('on-input-change', event);\n        },\n        setCurrentValue (value) {\n            if (value === this.currentValue) return;\n            this.$nextTick(() => {\n                this.resizeTextarea();\n            });\n            this.currentValue = value;\n            if (!findComponentUpward(this, ['DatePicker', 'TimePicker', 'Cascader', 'Search'])) {\n                this.dispatch('FormItem', 'on-form-change', value);\n            }\n        },\n        resizeTextarea () {\n            const autosize = this.autosize;\n            if (!autosize || this.type !== 'textarea') {\n                return false;\n            }\n\n            const minRows = autosize.minRows;\n            const maxRows = autosize.maxRows;\n\n            this.textareaStyles = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);\n        },\n        focus () {\n            if (this.type === 'textarea') {\n                this.$refs.textarea.focus();\n            } else {\n                this.$refs.input.focus();\n            }\n        },\n        blur () {\n            if (this.type === 'textarea') {\n                this.$refs.textarea.blur();\n            } else {\n                this.$refs.input.blur();\n            }\n        },\n        handleClear () {\n            const e = { target: { value: '' } };\n            this.$emit('input', '');\n            this.setCurrentValue('');\n            this.$emit('on-change', e);\n            this.$emit('on-clear');\n        },\n        handleSearch () {\n            if (this.disabled) return false;\n            this.$refs.input.focus();\n            this.$emit('on-search', this.currentValue);\n        }\n    },\n    watch: {\n        value (val) {\n            this.setCurrentValue(val);\n        }\n    },\n    mounted () {\n        if (this.type !== 'textarea') {\n            this.prepend = this.$slots.prepend !== undefined;\n            this.append = this.$slots.append !== undefined;\n            this.showPrefix = this.prefix !== '' || this.$slots.prefix !== undefined;\n            this.showSuffix = this.suffix !== '' || this.$slots.suffix !== undefined;\n        } else {\n            this.prepend = false;\n            this.append = false;\n        }\n        this.slotReady = true;\n        this.resizeTextarea();\n    }\n};\n",{"version":3,"sources":["input.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"input.vue","sourceRoot":"node_modules/iview/src/components/input","sourcesContent":["<template>\n    <div :class=\"wrapClasses\">\n        <template v-if=\"type !== 'textarea'\">\n            <div :class=\"[prefixCls + '-group-prepend']\" v-if=\"prepend\" v-show=\"slotReady\"><slot name=\"prepend\"></slot></div>\n            <i class=\"ivu-icon\" :class=\"['ivu-icon-ios-close-circle', prefixCls + '-icon', prefixCls + '-icon-clear' , prefixCls + '-icon-normal']\" v-if=\"clearable && currentValue && !disabled\" @click=\"handleClear\"></i>\n            <i class=\"ivu-icon\" :class=\"['ivu-icon-' + icon, prefixCls + '-icon', prefixCls + '-icon-normal']\" v-else-if=\"icon\" @click=\"handleIconClick\"></i>\n            <i class=\"ivu-icon ivu-icon-ios-search\" :class=\"[prefixCls + '-icon', prefixCls + '-icon-normal', prefixCls + '-search-icon']\" v-else-if=\"search && enterButton === false\" @click=\"handleSearch\"></i>\n            <span class=\"ivu-input-suffix\" v-else-if=\"showSuffix\"><slot name=\"suffix\"><i class=\"ivu-icon\" :class=\"['ivu-icon-' + suffix]\" v-if=\"suffix\"></i></slot></span>\n            <transition name=\"fade\">\n                <i class=\"ivu-icon ivu-icon-ios-loading ivu-load-loop\" :class=\"[prefixCls + '-icon', prefixCls + '-icon-validate']\" v-if=\"!icon\"></i>\n            </transition>\n            <input\n                :id=\"elementId\"\n                :autocomplete=\"autocomplete\"\n                :spellcheck=\"spellcheck\"\n                ref=\"input\"\n                :type=\"type\"\n                :class=\"inputClasses\"\n                :placeholder=\"placeholder\"\n                :disabled=\"disabled\"\n                :maxlength=\"maxlength\"\n                :readonly=\"readonly\"\n                :name=\"name\"\n                :value=\"currentValue\"\n                :number=\"number\"\n                :autofocus=\"autofocus\"\n                @keyup.enter=\"handleEnter\"\n                @keyup=\"handleKeyup\"\n                @keypress=\"handleKeypress\"\n                @keydown=\"handleKeydown\"\n                @focus=\"handleFocus\"\n                @blur=\"handleBlur\"\n                @compositionstart=\"handleComposition\"\n                @compositionupdate=\"handleComposition\"\n                @compositionend=\"handleComposition\"\n                @input=\"handleInput\"\n                @change=\"handleChange\">\n            <div :class=\"[prefixCls + '-group-append']\" v-if=\"append\" v-show=\"slotReady\"><slot name=\"append\"></slot></div>\n            <div :class=\"[prefixCls + '-group-append', prefixCls + '-search']\" v-else-if=\"search && enterButton\" @click=\"handleSearch\">\n                <i class=\"ivu-icon ivu-icon-ios-search\" v-if=\"enterButton === true\"></i>\n                <template v-else>{{ enterButton }}</template>\n            </div>\n            <span class=\"ivu-input-prefix\" v-else-if=\"showPrefix\"><slot name=\"prefix\"><i class=\"ivu-icon\" :class=\"['ivu-icon-' + prefix]\" v-if=\"prefix\"></i></slot></span>\n        </template>\n        <textarea\n            v-else\n            :id=\"elementId\"\n            :wrap=\"wrap\"\n            :autocomplete=\"autocomplete\"\n            :spellcheck=\"spellcheck\"\n            ref=\"textarea\"\n            :class=\"textareaClasses\"\n            :style=\"textareaStyles\"\n            :placeholder=\"placeholder\"\n            :disabled=\"disabled\"\n            :rows=\"rows\"\n            :maxlength=\"maxlength\"\n            :readonly=\"readonly\"\n            :name=\"name\"\n            :value=\"currentValue\"\n            :autofocus=\"autofocus\"\n            @keyup.enter=\"handleEnter\"\n            @keyup=\"handleKeyup\"\n            @keypress=\"handleKeypress\"\n            @keydown=\"handleKeydown\"\n            @focus=\"handleFocus\"\n            @blur=\"handleBlur\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n            @input=\"handleInput\">\n        </textarea>\n    </div>\n</template>\n<script>\n    import { oneOf, findComponentUpward } from '../../utils/assist';\n    import calcTextareaHeight from '../../utils/calcTextareaHeight';\n    import Emitter from '../../mixins/emitter';\n\n    const prefixCls = 'ivu-input';\n\n    export default {\n        name: 'Input',\n        mixins: [ Emitter ],\n        props: {\n            type: {\n                validator (value) {\n                    return oneOf(value, ['text', 'textarea', 'password', 'url', 'email', 'date', 'number', 'tel']);\n                },\n                default: 'text'\n            },\n            value: {\n                type: [String, Number],\n                default: ''\n            },\n            size: {\n                validator (value) {\n                    return oneOf(value, ['small', 'large', 'default']);\n                },\n                default () {\n                    return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n                }\n            },\n            placeholder: {\n                type: String,\n                default: ''\n            },\n            maxlength: {\n                type: Number\n            },\n            disabled: {\n                type: Boolean,\n                default: false\n            },\n            icon: String,\n            autosize: {\n                type: [Boolean, Object],\n                default: false\n            },\n            rows: {\n                type: Number,\n                default: 2\n            },\n            readonly: {\n                type: Boolean,\n                default: false\n            },\n            name: {\n                type: String\n            },\n            number: {\n                type: Boolean,\n                default: false\n            },\n            autofocus: {\n                type: Boolean,\n                default: false\n            },\n            spellcheck: {\n                type: Boolean,\n                default: false\n            },\n            autocomplete: {\n                type: String,\n                default: 'off'\n            },\n            clearable: {\n                type: Boolean,\n                default: false\n            },\n            elementId: {\n                type: String\n            },\n            wrap: {\n                validator (value) {\n                    return oneOf(value, ['hard', 'soft']);\n                },\n                default: 'soft'\n            },\n            prefix: {\n                type: String,\n                default: ''\n            },\n            suffix: {\n                type: String,\n                default: ''\n            },\n            search: {\n                type: Boolean,\n                default: false\n            },\n            enterButton: {\n                type: [Boolean, String],\n                default: false\n            }\n        },\n        data () {\n            return {\n                currentValue: this.value,\n                prefixCls: prefixCls,\n                prepend: true,\n                append: true,\n                slotReady: false,\n                textareaStyles: {},\n                showPrefix: false,\n                showSuffix: false,\n                isOnComposition: false\n            };\n        },\n        computed: {\n            wrapClasses () {\n                return [\n                    `${prefixCls}-wrapper`,\n                    {\n                        [`${prefixCls}-wrapper-${this.size}`]: !!this.size,\n                        [`${prefixCls}-type`]: this.type,\n                        [`${prefixCls}-group`]: this.prepend || this.append || (this.search && this.enterButton),\n                        [`${prefixCls}-group-${this.size}`]: (this.prepend || this.append || (this.search && this.enterButton)) && !!this.size,\n                        [`${prefixCls}-group-with-prepend`]: this.prepend,\n                        [`${prefixCls}-group-with-append`]: this.append || (this.search && this.enterButton),\n                        [`${prefixCls}-hide-icon`]: this.append,  // #554\n                        [`${prefixCls}-with-search`]: (this.search && this.enterButton)\n                    }\n                ];\n            },\n            inputClasses () {\n                return [\n                    `${prefixCls}`,\n                    {\n                        [`${prefixCls}-${this.size}`]: !!this.size,\n                        [`${prefixCls}-disabled`]: this.disabled,\n                        [`${prefixCls}-with-prefix`]: this.showPrefix,\n                        [`${prefixCls}-with-suffix`]: this.showSuffix || (this.search && this.enterButton === false)\n                    }\n                ];\n            },\n            textareaClasses () {\n                return [\n                    `${prefixCls}`,\n                    {\n                        [`${prefixCls}-disabled`]: this.disabled\n                    }\n                ];\n            }\n        },\n        methods: {\n            handleEnter (event) {\n                this.$emit('on-enter', event);\n                if (this.search) this.$emit('on-search', this.currentValue);\n            },\n            handleKeydown (event) {\n                this.$emit('on-keydown', event);\n            },\n            handleKeypress(event) {\n                this.$emit('on-keypress', event);\n            },\n            handleKeyup (event) {\n                this.$emit('on-keyup', event);\n            },\n            handleIconClick (event) {\n                this.$emit('on-click', event);\n            },\n            handleFocus (event) {\n                this.$emit('on-focus', event);\n            },\n            handleBlur (event) {\n                this.$emit('on-blur', event);\n                if (!findComponentUpward(this, ['DatePicker', 'TimePicker', 'Cascader', 'Search'])) {\n                    this.dispatch('FormItem', 'on-form-blur', this.currentValue);\n                }\n            },\n            handleComposition(event) {\n                if (event.type === 'compositionstart') {\n                    this.isOnComposition = true;\n                }\n                if (event.type === 'compositionend') {\n                    this.isOnComposition = false;\n                    this.handleInput(event);\n                }\n            },\n            handleInput (event) {\n                if (this.isOnComposition) return;\n\n                let value = event.target.value;\n                if (this.number && value !== '') value = Number.isNaN(Number(value)) ? value : Number(value);\n                this.$emit('input', value);\n                this.setCurrentValue(value);\n                this.$emit('on-change', event);\n            },\n            handleChange (event) {\n                this.$emit('on-input-change', event);\n            },\n            setCurrentValue (value) {\n                if (value === this.currentValue) return;\n                this.$nextTick(() => {\n                    this.resizeTextarea();\n                });\n                this.currentValue = value;\n                if (!findComponentUpward(this, ['DatePicker', 'TimePicker', 'Cascader', 'Search'])) {\n                    this.dispatch('FormItem', 'on-form-change', value);\n                }\n            },\n            resizeTextarea () {\n                const autosize = this.autosize;\n                if (!autosize || this.type !== 'textarea') {\n                    return false;\n                }\n\n                const minRows = autosize.minRows;\n                const maxRows = autosize.maxRows;\n\n                this.textareaStyles = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);\n            },\n            focus () {\n                if (this.type === 'textarea') {\n                    this.$refs.textarea.focus();\n                } else {\n                    this.$refs.input.focus();\n                }\n            },\n            blur () {\n                if (this.type === 'textarea') {\n                    this.$refs.textarea.blur();\n                } else {\n                    this.$refs.input.blur();\n                }\n            },\n            handleClear () {\n                const e = { target: { value: '' } };\n                this.$emit('input', '');\n                this.setCurrentValue('');\n                this.$emit('on-change', e);\n                this.$emit('on-clear');\n            },\n            handleSearch () {\n                if (this.disabled) return false;\n                this.$refs.input.focus();\n                this.$emit('on-search', this.currentValue);\n            }\n        },\n        watch: {\n            value (val) {\n                this.setCurrentValue(val);\n            }\n        },\n        mounted () {\n            if (this.type !== 'textarea') {\n                this.prepend = this.$slots.prepend !== undefined;\n                this.append = this.$slots.append !== undefined;\n                this.showPrefix = this.prefix !== '' || this.$slots.prefix !== undefined;\n                this.showSuffix = this.suffix !== '' || this.$slots.suffix !== undefined;\n            } else {\n                this.prepend = false;\n                this.append = false;\n            }\n            this.slotReady = true;\n            this.resizeTextarea();\n        }\n    };\n</script>\n"]}]}