{"remainingRequest":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\iview\\src\\components\\checkbox\\checkbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\iview\\src\\components\\checkbox\\checkbox.vue","mtime":1561122214853},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552301733393},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\babel-loader\\lib\\index.js","mtime":1561126025822},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552301733393},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\vue-loader\\lib\\index.js","mtime":1552301761574}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { findComponentUpward, oneOf } from '../../utils/assist';\nimport Emitter from '../../mixins/emitter';\n\nconst prefixCls = 'ivu-checkbox';\n\nexport default {\n    name: 'Checkbox',\n    mixins: [ Emitter ],\n    props: {\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        value: {\n            type: [String, Number, Boolean],\n            default: false\n        },\n        trueValue: {\n            type: [String, Number, Boolean],\n            default: true\n        },\n        falseValue: {\n            type: [String, Number, Boolean],\n            default: false\n        },\n        label: {\n            type: [String, Number, Boolean]\n        },\n        indeterminate: {\n            type: Boolean,\n            default: false\n        },\n        size: {\n            validator (value) {\n                return oneOf(value, ['small', 'large', 'default']);\n            },\n            default () {\n                return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n            }\n        },\n        name: {\n            type: String\n        }\n    },\n    data () {\n        return {\n            model: [],\n            currentValue: this.value,\n            group: false,\n            showSlot: true,\n            parent: findComponentUpward(this, 'CheckboxGroup'),\n            focusInner: false\n        };\n    },\n    computed: {\n        wrapClasses () {\n            return [\n                `${prefixCls}-wrapper`,\n                {\n                    [`${prefixCls}-group-item`]: this.group,\n                    [`${prefixCls}-wrapper-checked`]: this.currentValue,\n                    [`${prefixCls}-wrapper-disabled`]: this.disabled,\n                    [`${prefixCls}-${this.size}`]: !!this.size\n                }\n            ];\n        },\n        checkboxClasses () {\n            return [\n                `${prefixCls}`,\n                {\n                    [`${prefixCls}-checked`]: this.currentValue,\n                    [`${prefixCls}-disabled`]: this.disabled,\n                    [`${prefixCls}-indeterminate`]: this.indeterminate\n                }\n            ];\n        },\n        innerClasses () {\n            return [\n                `${prefixCls}-inner`,\n                {\n                    [`${prefixCls}-focus`]: this.focusInner\n                }\n            ];\n        },\n        inputClasses () {\n            return `${prefixCls}-input`;\n        }\n    },\n    mounted () {\n        this.parent = findComponentUpward(this, 'CheckboxGroup');\n        if (this.parent) {\n            this.group = true;\n        }\n\n        if (this.group) {\n            this.parent.updateModel(true);\n        } else {\n            this.updateModel();\n            this.showSlot = this.$slots.default !== undefined;\n        }\n    },\n    methods: {\n        change (event) {\n            if (this.disabled) {\n                return false;\n            }\n\n            const checked = event.target.checked;\n            this.currentValue = checked;\n\n            const value = checked ? this.trueValue : this.falseValue;\n            this.$emit('input', value);\n\n            if (this.group) {\n                this.parent.change(this.model);\n            } else {\n                this.$emit('on-change', value);\n                this.dispatch('FormItem', 'on-form-change', value);\n            }\n        },\n        updateModel () {\n            this.currentValue = this.value === this.trueValue;\n        },\n        onBlur () {\n            this.focusInner = false;\n        },\n        onFocus () {\n            this.focusInner = true;\n        }\n    },\n    watch: {\n        value (val) {\n            if (val === this.trueValue || val === this.falseValue) {\n                this.updateModel();\n            } else {\n                throw 'Value should be trueValue or falseValue.';\n            }\n        }\n    }\n};\n",{"version":3,"sources":["checkbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"checkbox.vue","sourceRoot":"node_modules/iview/src/components/checkbox","sourcesContent":["<template>\n    <label :class=\"wrapClasses\">\n        <span :class=\"checkboxClasses\">\n            <span :class=\"innerClasses\"></span>\n            <input\n                v-if=\"group\"\n                type=\"checkbox\"\n                :class=\"inputClasses\"\n                :disabled=\"disabled\"\n                :value=\"label\"\n                v-model=\"model\"\n                :name=\"name\"\n                @change=\"change\"\n                @focus=\"onFocus\"\n                @blur=\"onBlur\">\n            <input\n                v-else\n                type=\"checkbox\"\n                :class=\"inputClasses\"\n                :disabled=\"disabled\"\n                :checked=\"currentValue\"\n                :name=\"name\"\n                @change=\"change\"\n                @focus=\"onFocus\"\n                @blur=\"onBlur\">\n        </span>\n        <slot><span v-if=\"showSlot\">{{ label }}</span></slot>\n    </label>\n</template>\n<script>\n    import { findComponentUpward, oneOf } from '../../utils/assist';\n    import Emitter from '../../mixins/emitter';\n\n    const prefixCls = 'ivu-checkbox';\n\n    export default {\n        name: 'Checkbox',\n        mixins: [ Emitter ],\n        props: {\n            disabled: {\n                type: Boolean,\n                default: false\n            },\n            value: {\n                type: [String, Number, Boolean],\n                default: false\n            },\n            trueValue: {\n                type: [String, Number, Boolean],\n                default: true\n            },\n            falseValue: {\n                type: [String, Number, Boolean],\n                default: false\n            },\n            label: {\n                type: [String, Number, Boolean]\n            },\n            indeterminate: {\n                type: Boolean,\n                default: false\n            },\n            size: {\n                validator (value) {\n                    return oneOf(value, ['small', 'large', 'default']);\n                },\n                default () {\n                    return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n                }\n            },\n            name: {\n                type: String\n            }\n        },\n        data () {\n            return {\n                model: [],\n                currentValue: this.value,\n                group: false,\n                showSlot: true,\n                parent: findComponentUpward(this, 'CheckboxGroup'),\n                focusInner: false\n            };\n        },\n        computed: {\n            wrapClasses () {\n                return [\n                    `${prefixCls}-wrapper`,\n                    {\n                        [`${prefixCls}-group-item`]: this.group,\n                        [`${prefixCls}-wrapper-checked`]: this.currentValue,\n                        [`${prefixCls}-wrapper-disabled`]: this.disabled,\n                        [`${prefixCls}-${this.size}`]: !!this.size\n                    }\n                ];\n            },\n            checkboxClasses () {\n                return [\n                    `${prefixCls}`,\n                    {\n                        [`${prefixCls}-checked`]: this.currentValue,\n                        [`${prefixCls}-disabled`]: this.disabled,\n                        [`${prefixCls}-indeterminate`]: this.indeterminate\n                    }\n                ];\n            },\n            innerClasses () {\n                return [\n                    `${prefixCls}-inner`,\n                    {\n                        [`${prefixCls}-focus`]: this.focusInner\n                    }\n                ];\n            },\n            inputClasses () {\n                return `${prefixCls}-input`;\n            }\n        },\n        mounted () {\n            this.parent = findComponentUpward(this, 'CheckboxGroup');\n            if (this.parent) {\n                this.group = true;\n            }\n\n            if (this.group) {\n                this.parent.updateModel(true);\n            } else {\n                this.updateModel();\n                this.showSlot = this.$slots.default !== undefined;\n            }\n        },\n        methods: {\n            change (event) {\n                if (this.disabled) {\n                    return false;\n                }\n\n                const checked = event.target.checked;\n                this.currentValue = checked;\n\n                const value = checked ? this.trueValue : this.falseValue;\n                this.$emit('input', value);\n\n                if (this.group) {\n                    this.parent.change(this.model);\n                } else {\n                    this.$emit('on-change', value);\n                    this.dispatch('FormItem', 'on-form-change', value);\n                }\n            },\n            updateModel () {\n                this.currentValue = this.value === this.trueValue;\n            },\n            onBlur () {\n                this.focusInner = false;\n            },\n            onFocus () {\n                this.focusInner = true;\n            }\n        },\n        watch: {\n            value (val) {\n                if (val === this.trueValue || val === this.falseValue) {\n                    this.updateModel();\n                } else {\n                    throw 'Value should be trueValue or falseValue.';\n                }\n            }\n        }\n    };\n</script>\n"]}]}