{"remainingRequest":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\iview\\src\\components\\poptip\\poptip.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\iview\\src\\components\\poptip\\poptip.vue","mtime":1561122214853},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552301733393},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\babel-loader\\lib\\index.js","mtime":1561126025822},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552301733393},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\vue-loader\\lib\\index.js","mtime":1552301761574}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import Popper from '../base/popper';\n    import iButton from '../button/button.vue';\n    import {directive as clickOutside} from 'v-click-outside-x';\n    import TransferDom from '../../directives/transfer-dom';\n    import { oneOf } from '../../utils/assist';\n    import { transferIndex, transferIncrease } from '../../utils/transfer-queue';\n    import Locale from '../../mixins/locale';\n\n    const prefixCls = 'ivu-poptip';\n\n    export default {\n        name: 'Poptip',\n        mixins: [ Popper, Locale ],\n        directives: { clickOutside, TransferDom },\n        components: { iButton },\n        props: {\n            trigger: {\n                validator (value) {\n                    return oneOf(value, ['click', 'focus', 'hover']);\n                },\n                default: 'click'\n            },\n            placement: {\n                validator (value) {\n                    return oneOf(value, ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end']);\n                },\n                default: 'top'\n            },\n            title: {\n                type: [String, Number]\n            },\n            content: {\n                type: [String, Number],\n                default: ''\n            },\n            width: {\n                type: [String, Number]\n            },\n            confirm: {\n                type: Boolean,\n                default: false\n            },\n            okText: {\n                type: String\n            },\n            cancelText: {\n                type: String\n            },\n            transfer: {\n                type: Boolean,\n                default () {\n                    return !this.$IVIEW || this.$IVIEW.transfer === '' ? false : this.$IVIEW.transfer;\n                }\n            },\n            popperClass: {\n                type: String\n            },\n            wordWrap: {\n                type: Boolean,\n                default: false\n            },\n            // default by css: 8px 16px\n            padding: {\n                type: String\n            },\n            // 3.4.0\n            disabled: {\n                type: Boolean,\n                default: false\n            }\n        },\n        data () {\n            return {\n                prefixCls: prefixCls,\n                showTitle: true,\n                isInput: false,\n                disableCloseUnderTransfer: false,  // transfer 模式下，点击 slot 也会触发关闭\n                tIndex: this.handleGetIndex()\n            };\n        },\n        computed: {\n            classes () {\n                return [\n                    `${prefixCls}`,\n                    {\n                        [`${prefixCls}-confirm`]: this.confirm\n                    }\n                ];\n            },\n            popperClasses () {\n                return [\n                    `${prefixCls}-popper`,\n                    {\n                        [`${prefixCls}-confirm`]: this.transfer && this.confirm,\n                        [`${this.popperClass}`]: !!this.popperClass\n                    }\n                ];\n            },\n            styles () {\n                let style = {};\n\n                if (this.width) {\n                    style.width = `${this.width}px`;\n                }\n\n                if (this.transfer) style['z-index'] = 1060 + this.tIndex;\n\n                return style;\n            },\n            localeOkText () {\n                if (this.okText === undefined) {\n                    return this.t('i.poptip.okText');\n                } else {\n                    return this.okText;\n                }\n            },\n            localeCancelText () {\n                if (this.cancelText === undefined) {\n                    return this.t('i.poptip.cancelText');\n                } else {\n                    return this.cancelText;\n                }\n            },\n            contentClasses () {\n                return [\n                    `${prefixCls}-body-content`,\n                    {\n                        [`${prefixCls}-body-content-word-wrap`]: this.wordWrap\n                    }\n                ];\n            },\n            contentPaddingStyle () {\n                const styles = {};\n                if (this.padding !== '') styles['padding'] = this.padding;\n                return styles;\n            },\n        },\n        methods: {\n            handleClick () {\n                if (this.disabled) return;\n\n                if (this.confirm) {\n                    this.visible = !this.visible;\n                    return true;\n                }\n                if (this.trigger !== 'click') {\n                    return false;\n                }\n                this.visible = !this.visible;\n            },\n            handleTransferClick () {\n                if (this.transfer) this.disableCloseUnderTransfer = true;\n            },\n            handleClose () {\n                if (this.disableCloseUnderTransfer) {\n                    this.disableCloseUnderTransfer = false;\n                    return false;\n                }\n                if (this.confirm) {\n                    this.visible = false;\n                    return true;\n                }\n                if (this.trigger !== 'click') {\n                    return false;\n                }\n                this.visible = false;\n            },\n            handleFocus (fromInput = true) {\n                if (this.disabled) return;\n\n                if (this.trigger !== 'focus' || this.confirm || (this.isInput && !fromInput)) {\n                    return false;\n                }\n                this.visible = true;\n            },\n            handleBlur (fromInput = true) {\n                if (this.trigger !== 'focus' || this.confirm || (this.isInput && !fromInput)) {\n                    return false;\n                }\n                this.visible = false;\n            },\n            handleMouseenter () {\n                if (this.disabled) return;\n                \n                if (this.trigger !== 'hover' || this.confirm) {\n                    return false;\n                }\n                if (this.enterTimer) clearTimeout(this.enterTimer);\n                this.enterTimer = setTimeout(() => {\n                    this.visible = true;\n                }, 100);\n            },\n            handleMouseleave () {\n                if (this.trigger !== 'hover' || this.confirm) {\n                    return false;\n                }\n                if (this.enterTimer) {\n                    clearTimeout(this.enterTimer);\n                    this.enterTimer = setTimeout(() => {\n                        this.visible = false;\n                    }, 100);\n                }\n            },\n            cancel () {\n                this.visible = false;\n                this.$emit('on-cancel');\n            },\n            ok () {\n                this.visible = false;\n                this.$emit('on-ok');\n            },\n            getInputChildren () {\n                const $input = this.$refs.reference.querySelectorAll('input');\n                const $textarea = this.$refs.reference.querySelectorAll('textarea');\n                let $children = null;\n\n                if ($input.length) {\n                    $children = $input[0];\n                } else if ($textarea.length) {\n                    $children = $textarea[0];\n                }\n\n                return $children;\n            },\n            handleGetIndex () {\n                transferIncrease();\n                return transferIndex;\n            },\n            handleIndexIncrease () {\n                this.tIndex = this.handleGetIndex();\n            }\n        },\n        mounted () {\n            if (!this.confirm) {\n//                this.showTitle = this.$refs.title.innerHTML != `<div class=\"${prefixCls}-title-inner\"></div>`;\n                this.showTitle = (this.$slots.title !== undefined) || this.title;\n            }\n            // if trigger and children is input or textarea,listen focus & blur event\n            if (this.trigger === 'focus') {\n                this.$nextTick(() => {\n                    const $children = this.getInputChildren();\n                    if ($children) {\n                        this.isInput = true;\n                        $children.addEventListener('focus', this.handleFocus, false);\n                        $children.addEventListener('blur', this.handleBlur, false);\n                    }\n                });\n            }\n        },\n        beforeDestroy () {\n            const $children = this.getInputChildren();\n            if ($children) {\n                $children.removeEventListener('focus', this.handleFocus, false);\n                $children.removeEventListener('blur', this.handleBlur, false);\n            }\n        }\n    };\n",{"version":3,"sources":["poptip.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"poptip.vue","sourceRoot":"node_modules/iview/src/components/poptip","sourcesContent":["<template>\n    <div\n        :class=\"classes\"\n        @mouseenter=\"handleMouseenter\"\n        @mouseleave=\"handleMouseleave\"\n        v-click-outside=\"handleClose\">\n        <div\n            :class=\"[prefixCls + '-rel']\"\n            ref=\"reference\"\n            @click=\"handleClick\"\n            @mousedown=\"handleFocus(false)\"\n            @mouseup=\"handleBlur(false)\">\n            <slot></slot>\n        </div>\n        <transition name=\"fade\">\n            <div\n                :class=\"popperClasses\"\n                :style=\"styles\"\n                ref=\"popper\"\n                v-show=\"visible\"\n                @click=\"handleTransferClick\"\n                @mouseenter=\"handleMouseenter\"\n                @mouseleave=\"handleMouseleave\"\n                :data-transfer=\"transfer\"\n                v-transfer-dom>\n                <div :class=\"[prefixCls + '-content']\">\n                    <div :class=\"[prefixCls + '-arrow']\"></div>\n                    <div :class=\"[prefixCls + '-inner']\" v-if=\"confirm\">\n                        <div :class=\"[prefixCls + '-body']\">\n                            <i class=\"ivu-icon ivu-icon-ios-help-circle\"></i>\n                            <div :class=\"[prefixCls + '-body-message']\"><slot name=\"title\">{{ title }}</slot></div>\n                        </div>\n                        <div :class=\"[prefixCls + '-footer']\">\n                            <i-button type=\"text\" size=\"small\" @click.native=\"cancel\">{{ localeCancelText }}</i-button>\n                            <i-button type=\"primary\" size=\"small\" @click.native=\"ok\">{{ localeOkText }}</i-button>\n                        </div>\n                    </div>\n                    <div :class=\"[prefixCls + '-inner']\" v-if=\"!confirm\">\n                        <div :class=\"[prefixCls + '-title']\" :style=\"contentPaddingStyle\" v-if=\"showTitle\" ref=\"title\"><slot name=\"title\"><div :class=\"[prefixCls + '-title-inner']\">{{ title }}</div></slot></div>\n                        <div :class=\"[prefixCls + '-body']\" :style=\"contentPaddingStyle\">\n                            <div :class=\"contentClasses\"><slot name=\"content\"><div :class=\"[prefixCls + '-body-content-inner']\">{{ content }}</div></slot></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </transition>\n    </div>\n</template>\n<script>\n    import Popper from '../base/popper';\n    import iButton from '../button/button.vue';\n    import {directive as clickOutside} from 'v-click-outside-x';\n    import TransferDom from '../../directives/transfer-dom';\n    import { oneOf } from '../../utils/assist';\n    import { transferIndex, transferIncrease } from '../../utils/transfer-queue';\n    import Locale from '../../mixins/locale';\n\n    const prefixCls = 'ivu-poptip';\n\n    export default {\n        name: 'Poptip',\n        mixins: [ Popper, Locale ],\n        directives: { clickOutside, TransferDom },\n        components: { iButton },\n        props: {\n            trigger: {\n                validator (value) {\n                    return oneOf(value, ['click', 'focus', 'hover']);\n                },\n                default: 'click'\n            },\n            placement: {\n                validator (value) {\n                    return oneOf(value, ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end']);\n                },\n                default: 'top'\n            },\n            title: {\n                type: [String, Number]\n            },\n            content: {\n                type: [String, Number],\n                default: ''\n            },\n            width: {\n                type: [String, Number]\n            },\n            confirm: {\n                type: Boolean,\n                default: false\n            },\n            okText: {\n                type: String\n            },\n            cancelText: {\n                type: String\n            },\n            transfer: {\n                type: Boolean,\n                default () {\n                    return !this.$IVIEW || this.$IVIEW.transfer === '' ? false : this.$IVIEW.transfer;\n                }\n            },\n            popperClass: {\n                type: String\n            },\n            wordWrap: {\n                type: Boolean,\n                default: false\n            },\n            // default by css: 8px 16px\n            padding: {\n                type: String\n            },\n            // 3.4.0\n            disabled: {\n                type: Boolean,\n                default: false\n            }\n        },\n        data () {\n            return {\n                prefixCls: prefixCls,\n                showTitle: true,\n                isInput: false,\n                disableCloseUnderTransfer: false,  // transfer 模式下，点击 slot 也会触发关闭\n                tIndex: this.handleGetIndex()\n            };\n        },\n        computed: {\n            classes () {\n                return [\n                    `${prefixCls}`,\n                    {\n                        [`${prefixCls}-confirm`]: this.confirm\n                    }\n                ];\n            },\n            popperClasses () {\n                return [\n                    `${prefixCls}-popper`,\n                    {\n                        [`${prefixCls}-confirm`]: this.transfer && this.confirm,\n                        [`${this.popperClass}`]: !!this.popperClass\n                    }\n                ];\n            },\n            styles () {\n                let style = {};\n\n                if (this.width) {\n                    style.width = `${this.width}px`;\n                }\n\n                if (this.transfer) style['z-index'] = 1060 + this.tIndex;\n\n                return style;\n            },\n            localeOkText () {\n                if (this.okText === undefined) {\n                    return this.t('i.poptip.okText');\n                } else {\n                    return this.okText;\n                }\n            },\n            localeCancelText () {\n                if (this.cancelText === undefined) {\n                    return this.t('i.poptip.cancelText');\n                } else {\n                    return this.cancelText;\n                }\n            },\n            contentClasses () {\n                return [\n                    `${prefixCls}-body-content`,\n                    {\n                        [`${prefixCls}-body-content-word-wrap`]: this.wordWrap\n                    }\n                ];\n            },\n            contentPaddingStyle () {\n                const styles = {};\n                if (this.padding !== '') styles['padding'] = this.padding;\n                return styles;\n            },\n        },\n        methods: {\n            handleClick () {\n                if (this.disabled) return;\n\n                if (this.confirm) {\n                    this.visible = !this.visible;\n                    return true;\n                }\n                if (this.trigger !== 'click') {\n                    return false;\n                }\n                this.visible = !this.visible;\n            },\n            handleTransferClick () {\n                if (this.transfer) this.disableCloseUnderTransfer = true;\n            },\n            handleClose () {\n                if (this.disableCloseUnderTransfer) {\n                    this.disableCloseUnderTransfer = false;\n                    return false;\n                }\n                if (this.confirm) {\n                    this.visible = false;\n                    return true;\n                }\n                if (this.trigger !== 'click') {\n                    return false;\n                }\n                this.visible = false;\n            },\n            handleFocus (fromInput = true) {\n                if (this.disabled) return;\n\n                if (this.trigger !== 'focus' || this.confirm || (this.isInput && !fromInput)) {\n                    return false;\n                }\n                this.visible = true;\n            },\n            handleBlur (fromInput = true) {\n                if (this.trigger !== 'focus' || this.confirm || (this.isInput && !fromInput)) {\n                    return false;\n                }\n                this.visible = false;\n            },\n            handleMouseenter () {\n                if (this.disabled) return;\n                \n                if (this.trigger !== 'hover' || this.confirm) {\n                    return false;\n                }\n                if (this.enterTimer) clearTimeout(this.enterTimer);\n                this.enterTimer = setTimeout(() => {\n                    this.visible = true;\n                }, 100);\n            },\n            handleMouseleave () {\n                if (this.trigger !== 'hover' || this.confirm) {\n                    return false;\n                }\n                if (this.enterTimer) {\n                    clearTimeout(this.enterTimer);\n                    this.enterTimer = setTimeout(() => {\n                        this.visible = false;\n                    }, 100);\n                }\n            },\n            cancel () {\n                this.visible = false;\n                this.$emit('on-cancel');\n            },\n            ok () {\n                this.visible = false;\n                this.$emit('on-ok');\n            },\n            getInputChildren () {\n                const $input = this.$refs.reference.querySelectorAll('input');\n                const $textarea = this.$refs.reference.querySelectorAll('textarea');\n                let $children = null;\n\n                if ($input.length) {\n                    $children = $input[0];\n                } else if ($textarea.length) {\n                    $children = $textarea[0];\n                }\n\n                return $children;\n            },\n            handleGetIndex () {\n                transferIncrease();\n                return transferIndex;\n            },\n            handleIndexIncrease () {\n                this.tIndex = this.handleGetIndex();\n            }\n        },\n        mounted () {\n            if (!this.confirm) {\n//                this.showTitle = this.$refs.title.innerHTML != `<div class=\"${prefixCls}-title-inner\"></div>`;\n                this.showTitle = (this.$slots.title !== undefined) || this.title;\n            }\n            // if trigger and children is input or textarea,listen focus & blur event\n            if (this.trigger === 'focus') {\n                this.$nextTick(() => {\n                    const $children = this.getInputChildren();\n                    if ($children) {\n                        this.isInput = true;\n                        $children.addEventListener('focus', this.handleFocus, false);\n                        $children.addEventListener('blur', this.handleBlur, false);\n                    }\n                });\n            }\n        },\n        beforeDestroy () {\n            const $children = this.getInputChildren();\n            if ($children) {\n                $children.removeEventListener('focus', this.handleFocus, false);\n                $children.removeEventListener('blur', this.handleBlur, false);\n            }\n        }\n    };\n</script>\n"]}]}