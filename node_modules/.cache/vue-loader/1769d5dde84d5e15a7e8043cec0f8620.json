{"remainingRequest":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\src\\views\\components\\Transfer.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\src\\views\\components\\Transfer.vue","mtime":1561113286126},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552301733393},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\babel-loader\\lib\\index.js","mtime":1561126025822},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552301733393},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\vue-loader\\lib\\index.js","mtime":1552301761574}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n       data () {\n           return {\n               data1: this.getMockData(),\n               targetKeys1: this.getTargetKeys(),\n                data3: this.getMockData(),\n               targetKeys3: this.getTargetKeys(),\n               listStyle: {\n                   width: '250px',\n                   height: '300px'\n               }\n           }\n       },\n       methods: {\n           getMockData () {\n               let mockData = [];\n               for (let i = 1; i <= 20; i++) {\n                   mockData.push({\n                       key: i.toString(),\n                       label: '内容' + i,\n                       description: '内容' + i + '的描述信息',\n                       disabled: Math.random() * 3 < 1\n                   });\n               }\n               return mockData;\n           },\n           getTargetKeys () {\n               return this.getMockData()\n                       .filter(() => Math.random() * 2 > 1)\n                       .map(item => item.key);\n           },\n           render1 (item) {\n               return item.label;\n           },\n           handleChange1 (newTargetKeys, direction, moveKeys) {\n               console.log(newTargetKeys);\n               console.log(direction);\n               console.log(moveKeys);\n               this.targetKeys1 = newTargetKeys;\n           },\n\n         \n           handleChange3 (newTargetKeys) {\n               this.targetKeys3 = newTargetKeys;\n           },\n           render3 (item) {\n               return item.label + ' - ' + item.description;\n           },\n           reloadMockData () {\n               this.data3 = this.getMockData();\n               this.targetKeys3 = this.getTargetKeys();\n           }\n       }\n   }\n\n",{"version":3,"sources":["Transfer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Transfer.vue","sourceRoot":"src/views/components","sourcesContent":["<template>\r\n  <div class=\"animated fadeIn\">\r\n\r\n  <Row>\r\n        <Col span=\"24\" >\r\n             <div  class=\"doc-header\">\r\n\r\n\t\t\t\t     <Transfer\r\n        :data=\"data1\"\r\n        :target-keys=\"targetKeys1\"\r\n        :render-format=\"render1\"\r\n        @on-change=\"handleChange1\"></Transfer>\r\n            </div>\r\n            <div style=\"\" class=\"doc-content\">\r\n             \t\t   <h5>基础用法</h5>\r\n     \t\t\t   <p> 基本用法，展示了 data、target-keys、每行的渲染函数 render-format 以及回调函数 on-change 的用法</p>\r\n            </div>\r\n        </Col>\r\n\r\n\r\n     \r\n    </Row> \r\n\r\n\r\n\r\n<Row>\r\n        <Col span=\"24\" >\r\n   <div  class=\"doc-header\">\r\n           \r\n        <Transfer\r\n        :data=\"data3\"\r\n        :target-keys=\"targetKeys3\"\r\n        :list-style=\"listStyle\"\r\n        :render-format=\"render3\"\r\n        :operations=\"['向左移动','向右移动']\"\r\n        filterable\r\n        @on-change=\"handleChange3\">\r\n        <div :style=\"{float: 'right', margin: '5px'}\">\r\n            <i-button type=\"ghost\" size=\"small\" @click=\"reloadMockData\">刷新</i-button>\r\n        </div>\r\n    </Transfer>\r\n    </div>\r\n            <div style=\"\" class=\"doc-content\">\r\n             \t\t   <h5>高级用法</h5>\r\n     \t\t\t   <p> 穿梭框高级用法，可以自定义两列的宽高、操作文案，以及底部自定义操作，更多配置见 API。 </p>\r\n            </div>\r\n        </Col>\r\n\r\n\r\n      \r\n    </Row> \r\n\r\n\r\n\r\n\r\n\r\n\r\n</div>\r\n</template>\r\n\r\n<script>\r\n export default {\r\n        data () {\r\n            return {\r\n                data1: this.getMockData(),\r\n                targetKeys1: this.getTargetKeys(),\r\n                 data3: this.getMockData(),\r\n                targetKeys3: this.getTargetKeys(),\r\n                listStyle: {\r\n                    width: '250px',\r\n                    height: '300px'\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            getMockData () {\r\n                let mockData = [];\r\n                for (let i = 1; i <= 20; i++) {\r\n                    mockData.push({\r\n                        key: i.toString(),\r\n                        label: '内容' + i,\r\n                        description: '内容' + i + '的描述信息',\r\n                        disabled: Math.random() * 3 < 1\r\n                    });\r\n                }\r\n                return mockData;\r\n            },\r\n            getTargetKeys () {\r\n                return this.getMockData()\r\n                        .filter(() => Math.random() * 2 > 1)\r\n                        .map(item => item.key);\r\n            },\r\n            render1 (item) {\r\n                return item.label;\r\n            },\r\n            handleChange1 (newTargetKeys, direction, moveKeys) {\r\n                console.log(newTargetKeys);\r\n                console.log(direction);\r\n                console.log(moveKeys);\r\n                this.targetKeys1 = newTargetKeys;\r\n            },\r\n\r\n          \r\n            handleChange3 (newTargetKeys) {\r\n                this.targetKeys3 = newTargetKeys;\r\n            },\r\n            render3 (item) {\r\n                return item.label + ' - ' + item.description;\r\n            },\r\n            reloadMockData () {\r\n                this.data3 = this.getMockData();\r\n                this.targetKeys3 = this.getTargetKeys();\r\n            }\r\n        }\r\n    }\r\n\r\n</script>\r\n\r\n\r\n"]}]}