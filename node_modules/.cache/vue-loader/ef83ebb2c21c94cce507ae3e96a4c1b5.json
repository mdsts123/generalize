{"remainingRequest":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\iview\\src\\components\\table\\cell.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\iview\\src\\components\\table\\cell.vue","mtime":1561122214853},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552301733393},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\babel-loader\\lib\\index.js","mtime":1561126025822},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552301733393},{"path":"E:\\TRADE\\ThinkPHP\\pingzi\\Application\\Admin\\View\\TGorder\\generalize\\node_modules\\vue-loader\\lib\\index.js","mtime":1552301761574}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TableExpand from './expand';\nimport TableSlot from './slot';\nimport Icon from '../icon/icon.vue';\nimport Checkbox from '../checkbox/checkbox.vue';\nimport Tooltip from '../tooltip/tooltip.vue';\n\nexport default {\n    name: 'TableCell',\n    components: { Icon, Checkbox, TableExpand, TableSlot, Tooltip },\n    inject: ['tableRoot'],\n    props: {\n        prefixCls: String,\n        row: Object,\n        column: Object,\n        naturalIndex: Number,    // index of rebuildData\n        index: Number,           // _index of data\n        checked: Boolean,\n        disabled: Boolean,\n        expanded: Boolean,\n        fixed: {\n            type: [Boolean, String],\n            default: false\n        }\n    },\n    data () {\n        return {\n            renderType: '',\n            uid: -1,\n            context: this.$parent.$parent.$parent.currentContext,\n            showTooltip: false,  // 鼠标滑过overflow文本时，再检查是否需要显示\n        };\n    },\n    computed: {\n        classes () {\n            return [\n                `${this.prefixCls}-cell`,\n                {\n                    [`${this.prefixCls}-hidden`]: !this.fixed && this.column.fixed && (this.column.fixed === 'left' || this.column.fixed === 'right'),\n                    [`${this.prefixCls}-cell-ellipsis`]: this.column.ellipsis || false,\n                    [`${this.prefixCls}-cell-with-expand`]: this.renderType === 'expand',\n                    [`${this.prefixCls}-cell-with-selection`]: this.renderType === 'selection'\n                }\n            ];\n        },\n        expandCls () {\n            return [\n                `${this.prefixCls}-cell-expand`,\n                {\n                    [`${this.prefixCls}-cell-expand-expanded`]: this.expanded\n                }\n            ];\n        }\n    },\n    methods: {\n        toggleSelect () {\n            this.$parent.$parent.$parent.toggleSelect(this.index);\n        },\n        toggleExpand () {\n            this.$parent.$parent.$parent.toggleExpand(this.index);\n        },\n        handleClick () {\n            // 放置 Checkbox 冒泡\n        },\n        handleTooltipIn () {\n            const $content = this.$refs.content;\n            this.showTooltip = $content.scrollWidth > $content.offsetWidth;\n        },\n        handleTooltipOut () {\n            this.showTooltip = false;\n        }\n    },\n    created () {\n        if (this.column.type === 'index') {\n            this.renderType = 'index';\n        } else if (this.column.type === 'selection') {\n            this.renderType = 'selection';\n        } else if (this.column.type === 'html') {\n            this.renderType = 'html';\n        } else if (this.column.type === 'expand') {\n            this.renderType = 'expand';\n        } else if (this.column.render) {\n            this.renderType = 'render';\n        } else if (this.column.slot) {\n            this.renderType = 'slot';\n        } else {\n            this.renderType = 'normal';\n        }\n    }\n};\n",{"version":3,"sources":["cell.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"cell.vue","sourceRoot":"node_modules/iview/src/components/table","sourcesContent":["<template>\n    <div :class=\"classes\" ref=\"cell\">\n        <template v-if=\"renderType === 'index'\"><span>{{ column.indexMethod ? column.indexMethod(row) : (naturalIndex + 1) }}</span></template>\n        <template v-if=\"renderType === 'selection'\">\n            <Checkbox :value=\"checked\" @click.native.stop=\"handleClick\" @on-change=\"toggleSelect\" :disabled=\"disabled\"></Checkbox>\n        </template>\n        <template v-if=\"renderType === 'html'\"><span v-html=\"row[column.key]\"></span></template>\n        <template v-if=\"renderType === 'normal'\">\n            <template v-if=\"column.tooltip\">\n                <Tooltip transfer :content=\"row[column.key]\" :theme=\"tableRoot.tooltipTheme\" :disabled=\"!showTooltip\" :max-width=\"300\" class=\"ivu-table-cell-tooltip\">\n                    <span ref=\"content\" @mouseenter=\"handleTooltipIn\" @mouseleave=\"handleTooltipOut\" class=\"ivu-table-cell-tooltip-content\">{{ row[column.key] }}</span>\n                </Tooltip>\n            </template>\n            <span v-else>{{row[column.key]}}</span>\n        </template>\n        <template v-if=\"renderType === 'expand' && !row._disableExpand\">\n            <div :class=\"expandCls\" @click=\"toggleExpand\">\n                <Icon type=\"ios-arrow-forward\"></Icon>\n            </div>\n        </template>\n        <table-expand\n            v-if=\"renderType === 'render'\"\n            :row=\"row\"\n            :column=\"column\"\n            :index=\"index\"\n            :render=\"column.render\"></table-expand>\n        <table-slot\n            v-if=\"renderType === 'slot'\"\n            :row=\"row\"\n            :column=\"column\"\n            :index=\"index\"></table-slot>\n    </div>\n</template>\n<script>\n    import TableExpand from './expand';\n    import TableSlot from './slot';\n    import Icon from '../icon/icon.vue';\n    import Checkbox from '../checkbox/checkbox.vue';\n    import Tooltip from '../tooltip/tooltip.vue';\n\n    export default {\n        name: 'TableCell',\n        components: { Icon, Checkbox, TableExpand, TableSlot, Tooltip },\n        inject: ['tableRoot'],\n        props: {\n            prefixCls: String,\n            row: Object,\n            column: Object,\n            naturalIndex: Number,    // index of rebuildData\n            index: Number,           // _index of data\n            checked: Boolean,\n            disabled: Boolean,\n            expanded: Boolean,\n            fixed: {\n                type: [Boolean, String],\n                default: false\n            }\n        },\n        data () {\n            return {\n                renderType: '',\n                uid: -1,\n                context: this.$parent.$parent.$parent.currentContext,\n                showTooltip: false,  // 鼠标滑过overflow文本时，再检查是否需要显示\n            };\n        },\n        computed: {\n            classes () {\n                return [\n                    `${this.prefixCls}-cell`,\n                    {\n                        [`${this.prefixCls}-hidden`]: !this.fixed && this.column.fixed && (this.column.fixed === 'left' || this.column.fixed === 'right'),\n                        [`${this.prefixCls}-cell-ellipsis`]: this.column.ellipsis || false,\n                        [`${this.prefixCls}-cell-with-expand`]: this.renderType === 'expand',\n                        [`${this.prefixCls}-cell-with-selection`]: this.renderType === 'selection'\n                    }\n                ];\n            },\n            expandCls () {\n                return [\n                    `${this.prefixCls}-cell-expand`,\n                    {\n                        [`${this.prefixCls}-cell-expand-expanded`]: this.expanded\n                    }\n                ];\n            }\n        },\n        methods: {\n            toggleSelect () {\n                this.$parent.$parent.$parent.toggleSelect(this.index);\n            },\n            toggleExpand () {\n                this.$parent.$parent.$parent.toggleExpand(this.index);\n            },\n            handleClick () {\n                // 放置 Checkbox 冒泡\n            },\n            handleTooltipIn () {\n                const $content = this.$refs.content;\n                this.showTooltip = $content.scrollWidth > $content.offsetWidth;\n            },\n            handleTooltipOut () {\n                this.showTooltip = false;\n            }\n        },\n        created () {\n            if (this.column.type === 'index') {\n                this.renderType = 'index';\n            } else if (this.column.type === 'selection') {\n                this.renderType = 'selection';\n            } else if (this.column.type === 'html') {\n                this.renderType = 'html';\n            } else if (this.column.type === 'expand') {\n                this.renderType = 'expand';\n            } else if (this.column.render) {\n                this.renderType = 'render';\n            } else if (this.column.slot) {\n                this.renderType = 'slot';\n            } else {\n                this.renderType = 'normal';\n            }\n        }\n    };\n</script>\n"]}]}